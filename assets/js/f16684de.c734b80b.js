"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3783],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,y=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(y,i(i({ref:t},s),{},{components:n})):r.createElement(y,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},64231:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return s}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],c={title:"Summary of contracts"},l=void 0,d={unversionedId:"summary",id:"summary",title:"Summary of contracts",description:"Darknode contracts (Ethereum-only)",source:"@site/contracts/summary.mdx",sourceDirName:".",slug:"/summary",permalink:"/ren-client-docs/contracts/summary",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/contracts/summary.mdx",tags:[],version:"current",frontMatter:{title:"Summary of contracts"},sidebar:"contracts",previous:{title:"Deployments",permalink:"/ren-client-docs/contracts/deployments"},next:{title:"Previous Upgrades",permalink:"/ren-client-docs/contracts/upgrades"}},s=[{value:"Darknode contracts (Ethereum-only)",id:"darknode-contracts-ethereum-only",children:[{value:"<code>RenToken</code>",id:"rentoken",children:[],level:3},{value:"<code>DarknodeRegistry</code> and <code>DarknodeRegistryStore</code>",id:"darknoderegistry-and-darknoderegistrystore",children:[],level:3},{value:"<code>DarknodePayment</code> and <code>DarknodePaymentStore</code> LEGACY",id:"darknodepayment-and-darknodepaymentstore-legacy",children:[],level:3},{value:"<code>Protocol</code>",id:"protocol",children:[],level:3}],level:2},{value:"EVM Gateway contracts",id:"evm-gateway-contracts",children:[{value:"<code>RenERC20</code>",id:"renerc20",children:[],level:3},{value:"<code>MintGateway</code>",id:"mintgateway",children:[],level:3},{value:"<code>GatewayRegistry</code>",id:"gatewayregistry",children:[],level:3},{value:"<code>BasicAdapter</code>",id:"basicadapter",children:[],level:3}],level:2}],p={toc:s};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"darknode-contracts-ethereum-only"},"Darknode contracts (Ethereum-only)"),(0,o.kt)("p",null,"The darknode contracts include the following contracts:"),(0,o.kt)("h3",{id:"rentoken"},(0,o.kt)("inlineCode",{parentName:"h3"},"RenToken")),(0,o.kt)("p",null,"This is the ERC20 contract for the REN token."),(0,o.kt)("h3",{id:"darknoderegistry-and-darknoderegistrystore"},(0,o.kt)("inlineCode",{parentName:"h3"},"DarknodeRegistry")," and ",(0,o.kt)("inlineCode",{parentName:"h3"},"DarknodeRegistryStore")),(0,o.kt)("p",null,"These contracts are responsible for managing the registration and bonding of darknodes."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"DarknodeRegistry")," handles the logic of registering, while the ",(0,o.kt)("inlineCode",{parentName:"p"},"DarknodeRegistryStore")," stores the REN used for bonds."),(0,o.kt)("h3",{id:"darknodepayment-and-darknodepaymentstore-legacy"},(0,o.kt)("inlineCode",{parentName:"h3"},"DarknodePayment")," and ",(0,o.kt)("inlineCode",{parentName:"h3"},"DarknodePaymentStore")," ","[LEGACY]"),(0,o.kt)("p",null,"Minting and burning fees were previously subtracted on Ethereum, and then forwarded to the ",(0,o.kt)("inlineCode",{parentName:"p"},"DarknodePayment")," contract."),(0,o.kt)("p",null,"Fees are now collected in RenVM instead, but darknode operators can still withdraw legacy rewards from the ",(0,o.kt)("inlineCode",{parentName:"p"},"DarknodePayment")," contract through the Command Center."),(0,o.kt)("h3",{id:"protocol"},(0,o.kt)("inlineCode",{parentName:"h3"},"Protocol")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Protocol")," contract tracks the addresses of all of the other contracts."),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"evm-gateway-contracts"},"EVM Gateway contracts"),(0,o.kt)("h3",{id:"renerc20"},(0,o.kt)("inlineCode",{parentName:"h3"},"RenERC20")),(0,o.kt)("p",null,"Each ren-asset (e.g. renBTC, renDOGE, etc.) is represented on EVM-compatible chains (Ethereum, BSC, etc.) by an ERC20 contract."),(0,o.kt)("h3",{id:"mintgateway"},(0,o.kt)("inlineCode",{parentName:"h3"},"MintGateway")),(0,o.kt)("p",null,"Each ",(0,o.kt)("inlineCode",{parentName:"p"},"RenERC20")," has an associated ",(0,o.kt)("inlineCode",{parentName:"p"},"MintGateway")," contract which is responsible for minting and burning the ren-asset. It handles verifying the RenVM signature, and emitting burn events which are watched by RenVM."),(0,o.kt)("p",null,"A future upgrade will unify all ",(0,o.kt)("inlineCode",{parentName:"p"},"MintGateway"),"s into a single contract that manages all ",(0,o.kt)("inlineCode",{parentName:"p"},"RenERC20")," contracts."),(0,o.kt)("h3",{id:"gatewayregistry"},(0,o.kt)("inlineCode",{parentName:"h3"},"GatewayRegistry")),(0,o.kt)("p",null,"Each EVM-compatible chain has a ",(0,o.kt)("inlineCode",{parentName:"p"},"GatewayRegistry")," which can be used to look-up the ",(0,o.kt)("inlineCode",{parentName:"p"},"MintGateway")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"RenERC20")," contract addresses from a symbol."),(0,o.kt)("p",null,"A future upgrade will replace the ",(0,o.kt)("inlineCode",{parentName:"p"},"GatewayRegistry")," with a ",(0,o.kt)("inlineCode",{parentName:"p"},"RenERC20Factory")," which will also be responsible for deploying new ",(0,o.kt)("inlineCode",{parentName:"p"},"RenERC20"),"s."),(0,o.kt)("h3",{id:"basicadapter"},(0,o.kt)("inlineCode",{parentName:"h3"},"BasicAdapter")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"BasicAdapter")," contract is not part of the core RenVM protocol contracts, and is only used by the front-end RenJS library. It's a contract that submits mint signatures to a ",(0,o.kt)("inlineCode",{parentName:"p"},"MintGateway")," and then forwards the minted ren-asset to the specified recipient."),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("br",null))}u.isMDXComponent=!0}}]);