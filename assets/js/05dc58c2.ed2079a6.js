"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[969],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return _}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=l(n),_=i,b=h["".concat(u,".").concat(_)]||h[_]||c[_]||a;return n?r.createElement(b,o(o({ref:t},d),{},{components:n})):r.createElement(b,o({ref:t},d))}));function _(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=h;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},29906:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return _},frontMatter:function(){return u},metadata:function(){return d},toc:function(){return c}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=n(93454),s=["components"],u={title:"Validate"},l=void 0,d={unversionedId:"darknode-sol/libraries/Validate",id:"darknode-sol/libraries/Validate",title:"Validate",description:"Contract: Validate",source:"@site/contracts/darknode-sol/libraries/Validate.mdx",sourceDirName:"darknode-sol/libraries",slug:"/darknode-sol/libraries/Validate",permalink:"/ren-client-docs/contracts/darknode-sol/libraries/Validate",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/contracts/darknode-sol/libraries/Validate.mdx",tags:[],version:"current",frontMatter:{title:"Validate"}},c=[{value:"Contract: <code>Validate</code>",id:"contract-validate",children:[],level:2},{value:"Functions",id:"functions",children:[{value:"<strong><code>duplicatePropose</code></strong> <em><code>(uint256 _height, uint256 _round, bytes _blockhash1, uint256 _validRound1, bytes _signature1, bytes _blockhash2, uint256 _validRound2, bytes _signature2) \u2192 address</code></em> (internal)",id:"duplicatepropose-uint256-_height-uint256-_round-bytes-_blockhash1-uint256-_validround1-bytes-_signature1-bytes-_blockhash2-uint256-_validround2-bytes-_signature2--address-internal",children:[],level:3},{value:"<strong><code>recoverPropose</code></strong> <em><code>(uint256 _height, uint256 _round, bytes _blockhash, uint256 _validRound, bytes _signature) \u2192 address</code></em> (internal)",id:"recoverpropose-uint256-_height-uint256-_round-bytes-_blockhash-uint256-_validround-bytes-_signature--address-internal",children:[],level:3},{value:"<strong><code>proposeMessage</code></strong> <em><code>(uint256 _height, uint256 _round, bytes _blockhash, uint256 _validRound) \u2192 bytes</code></em> (internal)",id:"proposemessage-uint256-_height-uint256-_round-bytes-_blockhash-uint256-_validround--bytes-internal",children:[],level:3},{value:"<strong><code>duplicatePrevote</code></strong> <em><code>(uint256 _height, uint256 _round, bytes _blockhash1, bytes _signature1, bytes _blockhash2, bytes _signature2) \u2192 address</code></em> (internal)",id:"duplicateprevote-uint256-_height-uint256-_round-bytes-_blockhash1-bytes-_signature1-bytes-_blockhash2-bytes-_signature2--address-internal",children:[],level:3},{value:"<strong><code>recoverPrevote</code></strong> <em><code>(uint256 _height, uint256 _round, bytes _blockhash, bytes _signature) \u2192 address</code></em> (internal)",id:"recoverprevote-uint256-_height-uint256-_round-bytes-_blockhash-bytes-_signature--address-internal",children:[],level:3},{value:"<strong><code>prevoteMessage</code></strong> <em><code>(uint256 _height, uint256 _round, bytes _blockhash) \u2192 bytes</code></em> (internal)",id:"prevotemessage-uint256-_height-uint256-_round-bytes-_blockhash--bytes-internal",children:[],level:3},{value:"<strong><code>duplicatePrecommit</code></strong> <em><code>(uint256 _height, uint256 _round, bytes _blockhash1, bytes _signature1, bytes _blockhash2, bytes _signature2) \u2192 address</code></em> (internal)",id:"duplicateprecommit-uint256-_height-uint256-_round-bytes-_blockhash1-bytes-_signature1-bytes-_blockhash2-bytes-_signature2--address-internal",children:[],level:3},{value:"<strong><code>recoverPrecommit</code></strong> <em><code>(uint256 _height, uint256 _round, bytes _blockhash, bytes _signature) \u2192 address</code></em> (internal)",id:"recoverprecommit-uint256-_height-uint256-_round-bytes-_blockhash-bytes-_signature--address-internal",children:[],level:3},{value:"<strong><code>precommitMessage</code></strong> <em><code>(uint256 _height, uint256 _round, bytes _blockhash) \u2192 bytes</code></em> (internal)",id:"precommitmessage-uint256-_height-uint256-_round-bytes-_blockhash--bytes-internal",children:[],level:3},{value:"<strong><code>recoverSecret</code></strong> <em><code>(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e, uint256 _f, bytes _signature) \u2192 address</code></em> (internal)",id:"recoversecret-uint256-_a-uint256-_b-uint256-_c-uint256-_d-uint256-_e-uint256-_f-bytes-_signature--address-internal",children:[],level:3},{value:"<strong><code>secretMessage</code></strong> <em><code>(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e, uint256 _f) \u2192 bytes</code></em> (internal)",id:"secretmessage-uint256-_a-uint256-_b-uint256-_c-uint256-_d-uint256-_e-uint256-_f--bytes-internal",children:[],level:3}],level:2}],h={toc:c};function _(e){var t=e.components,n=(0,i.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(o.G,{type:o.e.Reference,mdxType:"DocTag"}),(0,a.kt)("h2",{id:"contract-validate"},"Contract: ",(0,a.kt)("inlineCode",{parentName:"h2"},"Validate")),(0,a.kt)("p",null,"Validate is a library for validating malicious darknode behaviour."),(0,a.kt)("hr",null),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"duplicatepropose-uint256-_height-uint256-_round-bytes-_blockhash1-uint256-_validround1-bytes-_signature1-bytes-_blockhash2-uint256-_validround2-bytes-_signature2--address-internal"},(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"duplicatePropose"))," ",(0,a.kt)("em",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"em"},"(uint256 _height, uint256 _round, bytes _blockhash1, uint256 _validRound1, bytes _signature1, bytes _blockhash2, uint256 _validRound2, bytes _signature2) \u2192 address"))," (internal)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"The"),": address of the signer if and only if propose messages were\ndifferent.")),(0,a.kt)("p",null,"Recovers two propose messages and checks if they were signed by\nthe same darknode. If they were different but the height and\nround were the same, then the darknode was behaving maliciously."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"recoverpropose-uint256-_height-uint256-_round-bytes-_blockhash-uint256-_validround-bytes-_signature--address-internal"},(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"recoverPropose"))," ",(0,a.kt)("em",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"em"},"(uint256 _height, uint256 _round, bytes _blockhash, uint256 _validRound, bytes _signature) \u2192 address"))," (internal)"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"proposemessage-uint256-_height-uint256-_round-bytes-_blockhash-uint256-_validround--bytes-internal"},(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"proposeMessage"))," ",(0,a.kt)("em",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"em"},"(uint256 _height, uint256 _round, bytes _blockhash, uint256 _validRound) \u2192 bytes"))," (internal)"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"duplicateprevote-uint256-_height-uint256-_round-bytes-_blockhash1-bytes-_signature1-bytes-_blockhash2-bytes-_signature2--address-internal"},(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"duplicatePrevote"))," ",(0,a.kt)("em",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"em"},"(uint256 _height, uint256 _round, bytes _blockhash1, bytes _signature1, bytes _blockhash2, bytes _signature2) \u2192 address"))," (internal)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"The"),": address of the signer if and only if prevote messages were\ndifferent.")),(0,a.kt)("p",null,"Recovers two prevote messages and checks if they were signed by\nthe same darknode. If they were different but the height and\nround were the same, then the darknode was behaving maliciously."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"recoverprevote-uint256-_height-uint256-_round-bytes-_blockhash-bytes-_signature--address-internal"},(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"recoverPrevote"))," ",(0,a.kt)("em",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"em"},"(uint256 _height, uint256 _round, bytes _blockhash, bytes _signature) \u2192 address"))," (internal)"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"prevotemessage-uint256-_height-uint256-_round-bytes-_blockhash--bytes-internal"},(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"prevoteMessage"))," ",(0,a.kt)("em",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"em"},"(uint256 _height, uint256 _round, bytes _blockhash) \u2192 bytes"))," (internal)"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"duplicateprecommit-uint256-_height-uint256-_round-bytes-_blockhash1-bytes-_signature1-bytes-_blockhash2-bytes-_signature2--address-internal"},(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"duplicatePrecommit"))," ",(0,a.kt)("em",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"em"},"(uint256 _height, uint256 _round, bytes _blockhash1, bytes _signature1, bytes _blockhash2, bytes _signature2) \u2192 address"))," (internal)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"The"),": address of the signer if and only if precommit messages were\ndifferent.")),(0,a.kt)("p",null,"Recovers two precommit messages and checks if they were signed\nby the same darknode. If they were different but the height and\nround were the same, then the darknode was behaving maliciously."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"recoverprecommit-uint256-_height-uint256-_round-bytes-_blockhash-bytes-_signature--address-internal"},(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"recoverPrecommit"))," ",(0,a.kt)("em",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"em"},"(uint256 _height, uint256 _round, bytes _blockhash, bytes _signature) \u2192 address"))," (internal)"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"precommitmessage-uint256-_height-uint256-_round-bytes-_blockhash--bytes-internal"},(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"precommitMessage"))," ",(0,a.kt)("em",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"em"},"(uint256 _height, uint256 _round, bytes _blockhash) \u2192 bytes"))," (internal)"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"recoversecret-uint256-_a-uint256-_b-uint256-_c-uint256-_d-uint256-_e-uint256-_f-bytes-_signature--address-internal"},(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"recoverSecret"))," ",(0,a.kt)("em",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"em"},"(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e, uint256 _f, bytes _signature) \u2192 address"))," (internal)"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"secretmessage-uint256-_a-uint256-_b-uint256-_c-uint256-_d-uint256-_e-uint256-_f--bytes-internal"},(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"secretMessage"))," ",(0,a.kt)("em",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"em"},"(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e, uint256 _f) \u2192 bytes"))," (internal)"),(0,a.kt)("hr",null))}_.isMDXComponent=!0},93454:function(e,t,n){n.d(t,{G:function(){return s},e:function(){return i}});var r,i,a=n(67294);!function(e){e.Tutorial="Tutorial",e.HowTo="How To",e.Reference="Reference",e.Explanation="Explanation"}(i||(i={}));var o=((r={})[i.Tutorial]="#b48ead",r[i.HowTo]="#69a8b9",r[i.Reference]="#bf616a",r[i.Explanation]="#d2b06c",r),s=function(e){var t=e.type,n=e.marginBottom;return a.createElement(a.Fragment,null,a.createElement("span",{style:{border:"2px solid "+o[t]||0,borderRadius:"5px",color:o[t]||"orange",padding:"0.1rem 0.4rem",marginBottom:void 0!==n?n:30,display:"inline-block"}},String(t)))}}}]);