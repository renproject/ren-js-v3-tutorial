"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7845],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1632:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=n(93454),l=["components"],s={title:"1. Smart Contract",slug:"/tutorial/smart-contract"},c=void 0,d={unversionedId:"v2/tutorial/smart-contract",id:"v2/tutorial/smart-contract",title:"1. Smart Contract",description:"This guide uses the online Remix IDE. If you prefer to set up a local repository, check out Ren Solidity Template.",source:"@site/ren-js/v2/tutorial/1-smart-contract.mdx",sourceDirName:"v2/tutorial",slug:"/tutorial/smart-contract",permalink:"/ren-client-docs/ren-js/tutorial/smart-contract",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/ren-js/v2/tutorial/1-smart-contract.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"1. Smart Contract",slug:"/tutorial/smart-contract"},sidebar:"docs",previous:{title:"Overview",permalink:"/ren-client-docs/ren-js/tutorial/overview"},next:{title:"2. React UI",permalink:"/ren-client-docs/ren-js/tutorial/react-ui"}},u=[{value:"Gateways",id:"gateways",children:[],level:3},{value:"Deposit function",id:"deposit-function",children:[],level:3},{value:"Withdraw function",id:"withdraw-function",children:[],level:3},{value:"Balance",id:"balance",children:[],level:3},{value:"Final code",id:"final-code",children:[],level:3},{value:"Deploying to Kovan",id:"deploying-to-kovan",children:[],level:3}],p={toc:u};function m(e){var t=e.components,s=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(o.G,{type:o.e.Tutorial,mdxType:"DocTag"}),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This guide uses the online Remix IDE. If you prefer to set up a local repository, check out ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/renproject/ren-solidity-template"},"Ren Solidity Template"),"."))),(0,i.kt)("p",null,"In this chapter, we will build a simple Ethereum contract that allows us to do three things: deposit BTC, withdraw BTC and check how much BTC we have deposited."),(0,i.kt)("p",null,"To get started, head over to the online Remix IDE at ",(0,i.kt)("a",{parentName:"p",href:"https://remix.ethereum.org"},"https://remix.ethereum.org"),', choose "Solidity" and create a new file called ',(0,i.kt)("inlineCode",{parentName:"p"},"Basic.sol"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="Basic.sol"',title:'"Basic.sol"'},"pragma solidity >=0.5.0;\n\ncontract Basic {\n}\n")),(0,i.kt)("h3",{id:"gateways"},"Gateways"),(0,i.kt)("p",null,"In order to accept BTC in our Ethereum contract, we need to talk to the ",(0,i.kt)("inlineCode",{parentName:"p"},"BTCGateway")," contract. The ",(0,i.kt)("inlineCode",{parentName:"p"},"BTCGateway")," contract works with RenVM to lock BTC into, and release out of, an ERC20-compatible token called renBTC."),(0,i.kt)("p",null,"All digital assets (BTC, ZEC, etc.) have their own ",(0,i.kt)("inlineCode",{parentName:"p"},"Gateway")," contract, so we need to ask the ",(0,i.kt)("inlineCode",{parentName:"p"},"GatewayRegistry")," contract for the address of the ",(0,i.kt)("inlineCode",{parentName:"p"},"BTCGateway"),"."),(0,i.kt)("p",null,"Let's add some code to our Ethereum contract so that we can talk to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Gateway"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GatewayRegistry"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"ERC20")," contracts:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="Basic.sol"',title:'"Basic.sol"'},"pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n}\n\ninterface IGateway {\n    function mint(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes calldata _sig) external returns (uint256);\n    function burn(bytes calldata _to, uint256 _amount) external returns (uint256);\n}\n\ninterface IGatewayRegistry {\n    function getGatewayBySymbol(string calldata _tokenSymbol) external view returns (IGateway);\n    function getTokenBySymbol(string calldata _tokenSymbol) external view returns (IERC20);\n}\n\ncontract Basic {\n    IGatewayRegistry public registry;\n\n    constructor(IGatewayRegistry _registry) public {\n        registry = _registry;\n    }\n}\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can find the source code for Gateway and GatewayRegistry on GitHub:\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/renproject/darknode-sol/tree/release/1.0.0/contracts/Gateway"},"https://github.com/renproject/darknode-sol/tree/release/1.0.0/contracts/Gateway"),"\nand the Kovan testnet GatewayRegistry on Etherscan:\n",(0,i.kt)("a",{parentName:"p",href:"https://kovan.etherscan.io/address/0x557e211EC5fc9a6737d2C6b7a1aDe3e0C11A8D5D"},"https://kovan.etherscan.io/address/0x557e211EC5fc9a6737d2C6b7a1aDe3e0C11A8D5D")))),(0,i.kt)("h3",{id:"deposit-function"},"Deposit function"),(0,i.kt)("p",null,"We will use the deposit function to mint & lock BTC into Ethereum. When locking & minting BTC into Ethereum, RenVM will always give us three parameters that we need to forward to the ",(0,i.kt)("inlineCode",{parentName:"p"},"BTCGateway")," contract:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount")," represents the amount of BTC we are transferring into Ethereum,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nHash")," (also known as the nonce hash) is used to uniquely identify a lock into Ethereum, and"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sig")," is a signature from RenVM to approve the mint.")),(0,i.kt)("p",null,"In addition to these required fields, our Ethereum contract will also allow the user to attach a message to their deposits and withdrawals. Our Ethereum contract will log these messages as Ethereum events (this is not necessary to transfer BTC into Ethereum, we are just doing it to demonstrate that you can define extra data and functionality)."),(0,i.kt)("p",null,"Add these logs to our Ethereum contract before the ",(0,i.kt)("inlineCode",{parentName:"p"},"constructor"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event Deposit(uint256 _amount, bytes _msg);\nevent Withdrawal(bytes _to, uint256 _amount, bytes _msg);\n")),(0,i.kt)("p",null,"Add the ",(0,i.kt)("inlineCode",{parentName:"p"},"deposit")," function after the ",(0,i.kt)("inlineCode",{parentName:"p"},"constructor"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function deposit(\n    // Parameters from users\n    bytes calldata _msg,\n    // Parameters from RenVM\n    uint256        _amount,\n    bytes32        _nHash,\n    bytes calldata _sig\n) external {\n}\n")),(0,i.kt)("p",null,"There is another parameter we need to forward to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Gateway"),": the ",(0,i.kt)("inlineCode",{parentName:"p"},"pHash")," (also known as the payload hash). It is the hash of any extra data we are using (in our case this is the attached ",(0,i.kt)("inlineCode",{parentName:"p"},"msg"),"). Inside the function body, add:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes32 pHash = keccak256(abi.encode(_msg));\n")),(0,i.kt)("p",null,"We can now get the address of the ",(0,i.kt)("inlineCode",{parentName:"p"},"BTCGateway")," and call ",(0,i.kt)("inlineCode",{parentName:"p"},"mint"),". This will return the amount of the ",(0,i.kt)("inlineCode",{parentName:"p"},"renBTC")," token we have received from the transfer, after subtracting a small fee that is paid to RenVM:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'uint256 mintedAmount = registry.getGatewayBySymbol("BTC").mint(pHash, _amount, _nHash, _sig);\n')),(0,i.kt)("p",null,"Finally, we log the deposit:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"emit Deposit(mintedAmount, _msg);\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"deposit")," function should now look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'function deposit(\n    // Parameters from users\n    bytes calldata _msg,\n    // Parameters from RenVM\n    uint256        _amount,\n    bytes32        _nHash,\n    bytes calldata _sig\n) external {\n    bytes32 pHash = keccak256(abi.encode(_msg));\n    uint256 mintedAmount = registry.getGatewayBySymbol("BTC").mint(pHash, _amount, _nHash, _sig);\n    emit Deposit(mintedAmount, _msg);\n}\n')),(0,i.kt)("h3",{id:"withdraw-function"},"Withdraw function"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"withdaw")," function is similar to the ",(0,i.kt)("inlineCode",{parentName:"p"},"deposit")," function - we call ",(0,i.kt)("inlineCode",{parentName:"p"},"burn")," on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Gateway")," contract and the log the withdrawal."),(0,i.kt)("p",null,"The user will provide the ",(0,i.kt)("inlineCode",{parentName:"p"},"msg")," of the withdrawal (as before), a ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," Bitcoin address to receive the funds to, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"amount")," of BTC they want to withdraw."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'function withdraw(bytes calldata _msg, bytes calldata _to, uint256 _amount) external {\n    uint256 burnedAmount = registry.getGatewayBySymbol("BTC").burn(_to, _amount);\n    emit Withdrawal(_to, burnedAmount, _msg);\n}\n')),(0,i.kt)("h3",{id:"balance"},"Balance"),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"balance"),", instead of getting the address of the ",(0,i.kt)("inlineCode",{parentName:"p"},"BTCGateway"),", we need the address of the renBTC ERC20 contract. We can use ",(0,i.kt)("inlineCode",{parentName:"p"},"getTokenBySymbol")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"getGatewayBySymbol"),". After looking up the address, we ask it for the balance of our ",(0,i.kt)("inlineCode",{parentName:"p"},"Basic")," contract:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'function balance() public view returns (uint256) {\n    return registry.getTokenBySymbol("BTC").balanceOf(address(this));\n}\n')),(0,i.kt)("h3",{id:"final-code"},"Final code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="Basic.sol"',title:'"Basic.sol"'},'pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n}\n\n\ninterface IGateway {\n    function mint(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes calldata _sig) external returns (uint256);\n    function burn(bytes calldata _to, uint256 _amount) external returns (uint256);\n}\n\ninterface IGatewayRegistry {\n    function getGatewayBySymbol(string calldata _tokenSymbol) external view returns (IGateway);\n    function getTokenBySymbol(string calldata _tokenSymbol) external view returns (IERC20);\n}\n\ncontract Basic {\n    IGatewayRegistry public registry;\n\n    event Deposit(uint256 _amount, bytes _msg);\n    event Withdrawal(bytes _to, uint256 _amount, bytes _msg);\n\n    constructor(IGatewayRegistry _registry) public {\n        registry = _registry;\n    }\n\n    function deposit(\n        // Parameters from users\n        bytes calldata _msg,\n        // Parameters from RenVM\n        uint256        _amount,\n        bytes32        _nHash,\n        bytes calldata _sig\n    ) external {\n        bytes32 pHash = keccak256(abi.encode(_msg));\n        uint256 mintedAmount = registry.getGatewayBySymbol("BTC").mint(pHash, _amount, _nHash, _sig);\n        emit Deposit(mintedAmount, _msg);\n    }\n\n    function withdraw(bytes calldata _msg, bytes calldata _to, uint256 _amount) external {\n        uint256 burnedAmount = registry.getGatewayBySymbol("BTC").burn(_to, _amount);\n        emit Withdrawal(_to, burnedAmount, _msg);\n    }\n\n    function balance() public view returns (uint256) {\n        return registry.getTokenBySymbol("BTC").balanceOf(address(this));\n    }\n}\n')),(0,i.kt)("h3",{id:"deploying-to-kovan"},"Deploying to Kovan"),(0,i.kt)("p",null,"You'll need ",(0,i.kt)("a",{parentName:"p",href:"https://metamask.io"},"MetaMask")," installed and the Kovan network selected. Additionally, you'll need Kovan ETH (KETH). Request some here: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kovan-testnet/faucet"},"https://github.com/kovan-testnet/faucet")),(0,i.kt)("p",null,"Copy the final ",(0,i.kt)("inlineCode",{parentName:"p"},"Basic.sol"),' into Remix and then click "Compile Basic.sol" in the "Solidity Compiler" tab.'),(0,i.kt)("p",null,'Switch to the "Deploy & Run Transactions" tab and select "Injected Web3" as the environment. Make sure "Basic" is selected in the contract drop-down. Paste the ',(0,i.kt)("inlineCode",{parentName:"p"},"GatewayRegistry"),"'s address, ",(0,i.kt)("inlineCode",{parentName:"p"},"0x557e211EC5fc9a6737d2C6b7a1aDe3e0C11A8D5D"),', next to "Deploy" and press the "Deploy" button. After approving the transaction in MetaMask, it will show you the newly deployed Ethereum contract. Hit the "clipboard" button and save the address for the next section.'),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Remix deploy screenshot",src:n(21140).Z})),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can also use the Basic contract that we have deployed here: 0x3Aa969d343BD6AE66c4027Bb61A382DC96e88150."))),(0,i.kt)("p",null,"In the next chapter, we will begin building a simple user interface for interacting with our newly deployed Ethereum contract."))}m.isMDXComponent=!0},93454:function(e,t,n){n.d(t,{G:function(){return l},e:function(){return r}});var a,r,i=n(67294);!function(e){e.Tutorial="Tutorial",e.HowTo="How To",e.Reference="Reference",e.Explanation="Explanation"}(r||(r={}));var o=((a={})[r.Tutorial]="#b48ead",a[r.HowTo]="#69a8b9",a[r.Reference]="#bf616a",a[r.Explanation]="#d2b06c",a),l=function(e){var t=e.type,n=e.marginBottom;return i.createElement(i.Fragment,null,i.createElement("span",{style:{border:"2px solid "+o[t]||0,borderRadius:"5px",color:o[t]||"orange",padding:"0.1rem 0.4rem",marginBottom:void 0!==n?n:30,display:"inline-block"}},String(t)))}},21140:function(e,t,n){t.Z=n.p+"assets/images/deploy-d03b5260c353e1b607702b3a68b7c53c.png"}}]);