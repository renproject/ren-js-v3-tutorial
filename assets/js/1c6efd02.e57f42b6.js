"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[106],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=r.createContext({}),s=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},p=function(t){var e=s(t.components);return r.createElement(l.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,l=t.parentName,p=c(t,["components","mdxType","originalType","parentName"]),u=s(n),d=a,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(g,o(o({ref:e},p),{},{components:n})):r.createElement(g,o({ref:e},p))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=t,c.mdxType="string"==typeof t?t:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},75614:function(t,e,n){n.r(e),n.d(e,{contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],c={title:"Integrating with Ren contracts",slug:"/integrating-contracts"},l=void 0,s={unversionedId:"integrating-contracts",id:"integrating-contracts",title:"Integrating with Ren contracts",description:"For now, integrating with Ren contracts is only documented for EVM chains and Solidity.",source:"@site/contracts/integrating-contracts.mdx",sourceDirName:".",slug:"/integrating-contracts",permalink:"/ren-client-docs/contracts/integrating-contracts",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/contracts/integrating-contracts.mdx",tags:[],version:"current",frontMatter:{title:"Integrating with Ren contracts",slug:"/integrating-contracts"},sidebar:"contracts",previous:{title:"Contracts",permalink:"/ren-client-docs/contracts/"},next:{title:"Deployments",permalink:"/ren-client-docs/contracts/deployments"}},p=[{value:"Solidity",id:"solidity",children:[{value:"Importing Ren contracts",id:"importing-ren-contracts",children:[],level:3},{value:"Writing a mint function",id:"writing-a-mint-function",children:[],level:3},{value:"Testing on a local network",id:"testing-on-a-local-network",children:[],level:3}],level:2}],m={toc:p};function u(t){var e=t.components,n=(0,a.Z)(t,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"For now, integrating with Ren contracts is only documented for EVM chains and Solidity."))),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/ren-js/v3/tutorial/overview"},"RenJS Tutorial")," goes through writing a smart contract that can mint Ren-tokens."),(0,i.kt)("p",null,"There is also the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/renproject/ren-solidity-template"},"Ren Solidity Template")," repository includes local tests that test a mint function using RenJS and a mock RenVM provider."),(0,i.kt)("h2",{id:"solidity"},"Solidity"),(0,i.kt)("h3",{id:"importing-ren-contracts"},"Importing Ren contracts"),(0,i.kt)("p",null,"The Ren contracts can be imported with the following packages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@renproject/sol"},(0,i.kt)("inlineCode",{parentName:"a"},"@renproject/sol"))," - for the DarknodeRegistry and DarknodePayment contracts"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@renproject/gateway-sol"},(0,i.kt)("inlineCode",{parentName:"a"},"@renproject/gateway-sol"))," - for the GatewayRegistry, Gateway and RenERC20 contracts")),(0,i.kt)("p",null,"Note that they currently require an older Solidity compiler version - ",(0,i.kt)("inlineCode",{parentName:"p"},"0.5.17"),". You can configure Hardhat to use multiple Solidity versions by adding the following line to the ",(0,i.kt)("inlineCode",{parentName:"p"},"networks")," field in ",(0,i.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'  solidity: {\n    compilers: [\n      {\n        version: "0.8.4",\n      },\n      {\n        version: "0.5.17",\n      },\n    ],\n  },\n')),(0,i.kt)("p",null,"You can then import contracts in Solidity like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'import {GatewayRegistry} from "@renproject/gateway-sol/contracts/Gateway/GatewayRegistry.sol";\n')),(0,i.kt)("h3",{id:"writing-a-mint-function"},"Writing a mint function"),(0,i.kt)("p",null,"In order for a contract to be compatible with how RenJS submits mints, the function being called must follow the following standard:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'function functionName(\n\n    // Normal parameters - can be any number and types\n    uint256 _param1,\n    uint256 _param2,\n\n    // Parameters from RenVM\n    uint256        _amount,\n    bytes32        _nHash,\n    bytes calldata _sig\n\n) external {\n\n  // ... your code\n\n  // Hash parameters. All parameters besides _amount, _nHash and _sig should be included.\n  bytes32 pHash = keccak256(abi.encode(_param1, _param2));\n\n  // Mint Ren-asset. The returned value is how much was minted, after subtracting RenVM fees.\n  uint256 mintedAmount = registry.getGatewayBySymbol("BTC").mint(pHash, _amount, _nHash, _sig);\n\n  // ... your code\n\n}\n')),(0,i.kt)("p",null,"If you want to support multiple Ren-assets, then you can pass in a ",(0,i.kt)("inlineCode",{parentName:"p"},"_symbol")," parameter anywhere in the parameters (before the ",(0,i.kt)("inlineCode",{parentName:"p"},"_amount")," parameter) and pass it to ",(0,i.kt)("inlineCode",{parentName:"p"},"getGatewayBySymbol"),"."),(0,i.kt)("h3",{id:"testing-on-a-local-network"},"Testing on a local network"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/renproject/ren-solidity-template"},"Ren Solidity Template"),"."))}u.isMDXComponent=!0}}]);