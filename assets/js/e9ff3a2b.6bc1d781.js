"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8139],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return t?r.createElement(h,o(o({ref:n},d),{},{components:t})):r.createElement(h,o({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3492:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],s={title:"Quick Start",slug:"/quick-start"},l=void 0,c={unversionedId:"v2/quick-start",id:"v2/quick-start",title:"Quick Start",description:"This is a quick-start guide for minting BTC on Ethereum, intended for developers already familiar with Web3.",source:"@site/ren-js/v2/quick-start.md",sourceDirName:"v2",slug:"/quick-start",permalink:"/ren-client-docs/ren-js/quick-start",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/ren-js/v2/quick-start.md",tags:[],version:"current",frontMatter:{title:"Quick Start",slug:"/quick-start"},sidebar:"docs",previous:{title:"Solana",permalink:"/ren-client-docs/ren-js/v3/reference/chains/solana"},next:{title:"RenJS v3",permalink:"/ren-client-docs/ren-js/ren-js-v3"}},d=[{value:"Install RenJS and Ethers",id:"install-renjs-and-ethers",children:[],level:3},{value:"Ethereum provider",id:"ethereum-provider",children:[],level:3},{value:"Mint tokenized Bitcoin",id:"mint-tokenized-bitcoin",children:[],level:3},{value:"Burn and release tokenized Bitcoin",id:"burn-and-release-tokenized-bitcoin",children:[],level:3}],u={toc:d};function p(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This is a quick-start guide for minting BTC on Ethereum, intended for developers already familiar with Web3."),(0,i.kt)("h3",{id:"install-renjs-and-ethers"},"Install RenJS and Ethers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add @renproject/ren @renproject/chains\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"ethereum-provider"},"Ethereum provider"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Ethers.js with Infura/Alchemy and a mnemonic"),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add ethers\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'ETHEREUM_PROVIDER="https://kovan.infura.io/v3/YOUR_INFURA_KEY"\nMNEMONIC=""\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { ethers } from "ethers";\n\nconst { ETHEREUM_PROVIDER, MNEMONIC } = process.env;\n\nconst provider = new ethers.providers.JsonRpcProvider(ETHEREUM_PROVIDER);\nconst signer = new ethers.Wallet.fromMnemonic(MNEMONIC);\nconst address = await signer.getAddress();\nconst ethereumProvider = { provider, signer };\n'))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Ethers.js with MetaMask"),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add ethers\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { ethers } from "ethers";\n\n// Inside an async method.\nawait window.ethereum.enable();\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\nconst signer = provider.getSigner();\nconst address = await signer.getAddress();\nconst ethereumProvider = { provider, signer };\n'))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Existing Web3 provider"),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Inside an async method.\nconst address = (await web3.eth.getAccounts())[0];\nconst ethereumProvider = web3.currentProvider;\n"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"mint-tokenized-bitcoin"},"Mint tokenized Bitcoin"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { Bitcoin, Ethereum } from "@renproject/chains";\nimport RenJS from "@renproject/ren";\n\n// Must already be set-up.\nconsole.log(ethereumProvider);\nconsole.log(address);\n\nconst mint = async () => {\n    const lockAndMint = await new RenJS("testnet", {\n        useV2TransactionFormat: true,\n    }).lockAndMint({\n        asset: "BTC",\n        from: Bitcoin(),\n        to: Ethereum(ethereumProvider).Address(address),\n    });\n\n    console.log(`Deposit BTC to ${lockAndMint.gatewayAddress}`);\n\n    // See also RenJS.defaultDepositHandler.\n    lockAndMint.on("deposit", (deposit) => {\n        await deposit.confirmed();\n        await deposit.signed();\n        await deposit.mint();\n    });\n};\n\nmint().catch(console.error);\n')),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"In production, retry-logic should be added each of the ",(0,i.kt)("inlineCode",{parentName:"p"},"confirmed"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"signed")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"mint")," steps. They may occasionally fail due to network issues."))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"burn-and-release-tokenized-bitcoin"},"Burn and release tokenized Bitcoin"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { Bitcoin, Ethereum } from "@renproject/chains";\nimport RenJS from "@renproject/ren";\n\n// Must already be set-up.\nconsole.log(ethereumProvider);\n\nconst burn = async () => {\n    const value = 0.02 * 1e8; // sats\n\n    const burnAndRelease = await new RenJS("testnet", {\n        useV2TransactionFormat: true,\n    }).burnAndRelease({\n        asset: "BTC",\n        to: Bitcoin().Address("miMi2VET41YV1j6SDNTeZoPBbmH8B4nEx6"),\n        from: Ethereum(ethereumProvider).Account({ value }),\n    });\n\n    await burnAndRelease.burn();\n    await burnAndRelease.release();\n};\n\nburn().catch(console.error);\n')),(0,i.kt)("p",null,"As with minting, the ",(0,i.kt)("inlineCode",{parentName:"p"},"burn")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"release")," methods may occasionally fail due to network issues."),(0,i.kt)("hr",null),(0,i.kt)("p",null,"For more details on all Gateway contracts, check out the ",(0,i.kt)("a",{parentName:"p",href:"../contracts/deployments"},"deployed contracts page"),"."),(0,i.kt)("hr",null))}p.isMDXComponent=!0}}]);