"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2876],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=i.createContext({}),s=function(e){var t=i.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,u=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(n),c=a,h=p["".concat(u,".").concat(c)]||p[c]||m[c]||r;return n?i.createElement(h,o(o({ref:t},d),{},{components:n})):i.createElement(h,o({ref:t},d))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=p;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},22712:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return u},metadata:function(){return d},toc:function(){return m}});var i=n(87462),a=n(63366),r=(n(67294),n(3905)),o=n(93454),l=["components"],u={title:"GatewayLogicV1"},s=void 0,d={unversionedId:"darknode-sol/Gateway/GatewayLogicV1",id:"darknode-sol/Gateway/GatewayLogicV1",title:"GatewayLogicV1",description:"Contract: GatewayLogicV1",source:"@site/contracts/darknode-sol/Gateway/GatewayLogicV1.mdx",sourceDirName:"darknode-sol/Gateway",slug:"/darknode-sol/Gateway/GatewayLogicV1",permalink:"/ren-client-docs/contracts/darknode-sol/Gateway/GatewayLogicV1",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/contracts/darknode-sol/Gateway/GatewayLogicV1.mdx",tags:[],version:"current",frontMatter:{title:"GatewayLogicV1"}},m=[{value:"Contract: <code>GatewayLogicV1</code>",id:"contract-gatewaylogicv1",children:[],level:2},{value:"Modifiers",id:"modifiers",children:[{value:"<code>onlyOwnerOrMintAuthority()</code>",id:"onlyownerormintauthority",children:[],level:3}],level:2},{value:"Functions",id:"functions",children:[{value:"<strong><code>initialize</code></strong> <em><code>(contract RenERC20LogicV1 _token, address _feeRecipient, address _mintAuthority, uint16 _mintFee, uint16 _burnFee, uint256 _minimumBurnAmount)</code></em> (public)",id:"initialize-contract-renerc20logicv1-_token-address-_feerecipient-address-_mintauthority-uint16-_mintfee-uint16-_burnfee-uint256-_minimumburnamount-public",children:[],level:3},{value:"<strong><code>claimTokenOwnership</code></strong> <em><code>()</code></em> (public)",id:"claimtokenownership--public",children:[],level:3},{value:"<strong><code>transferTokenOwnership</code></strong> <em><code>(contract GatewayLogicV1 _nextTokenOwner)</code></em> (public)",id:"transfertokenownership-contract-gatewaylogicv1-_nexttokenowner-public",children:[],level:3},{value:"<strong><code>updateMintAuthority</code></strong> <em><code>(address _nextMintAuthority)</code></em> (public)",id:"updatemintauthority-address-_nextmintauthority-public",children:[],level:3},{value:"<strong><code>updateMinimumBurnAmount</code></strong> <em><code>(uint256 _minimumBurnAmount)</code></em> (public)",id:"updateminimumburnamount-uint256-_minimumburnamount-public",children:[],level:3},{value:"<strong><code>updateFeeRecipient</code></strong> <em><code>(address _nextFeeRecipient)</code></em> (public)",id:"updatefeerecipient-address-_nextfeerecipient-public",children:[],level:3},{value:"<strong><code>updateMintFee</code></strong> <em><code>(uint16 _nextMintFee)</code></em> (public)",id:"updatemintfee-uint16-_nextmintfee-public",children:[],level:3},{value:"<strong><code>updateBurnFee</code></strong> <em><code>(uint16 _nextBurnFee)</code></em> (public)",id:"updateburnfee-uint16-_nextburnfee-public",children:[],level:3},{value:"<strong><code>mint</code></strong> <em><code>(bytes32 _pHash, uint256 _amountUnderlying, bytes32 _nHash, bytes _sig) \u2192 uint256</code></em> (public)",id:"mint-bytes32-_phash-uint256-_amountunderlying-bytes32-_nhash-bytes-_sig--uint256-public",children:[],level:3},{value:"<strong><code>burn</code></strong> <em><code>(bytes _to, uint256 _amount) \u2192 uint256</code></em> (public)",id:"burn-bytes-_to-uint256-_amount--uint256-public",children:[],level:3},{value:"<strong><code>verifySignature</code></strong> <em><code>(bytes32 _signedMessageHash, bytes _sig) \u2192 bool</code></em> (public)",id:"verifysignature-bytes32-_signedmessagehash-bytes-_sig--bool-public",children:[],level:3},{value:"<strong><code>hashForSignature</code></strong> <em><code>(bytes32 _pHash, uint256 _amount, address _to, bytes32 _nHash) \u2192 bytes32</code></em> (public)",id:"hashforsignature-bytes32-_phash-uint256-_amount-address-_to-bytes32-_nhash--bytes32-public",children:[],level:3}],level:2},{value:"Events",id:"events",children:[{value:"<strong><code>LogMintAuthorityUpdated</code></strong> <em><code>(address _newMintAuthority)</code></em>",id:"logmintauthorityupdated-address-_newmintauthority",children:[],level:3},{value:"<strong><code>LogMint</code></strong> <em><code>(address _to, uint256 _amount, uint256 _n, bytes32 _signedMessageHash)</code></em>",id:"logmint-address-_to-uint256-_amount-uint256-_n-bytes32-_signedmessagehash",children:[],level:3},{value:"<strong><code>LogBurn</code></strong> <em><code>(bytes _to, uint256 _amount, uint256 _n, bytes _indexedTo)</code></em>",id:"logburn-bytes-_to-uint256-_amount-uint256-_n-bytes-_indexedto",children:[],level:3}],level:2}],p={toc:m};function c(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(o.G,{type:o.e.Reference,mdxType:"DocTag"}),(0,r.kt)("h2",{id:"contract-gatewaylogicv1"},"Contract: ",(0,r.kt)("inlineCode",{parentName:"h2"},"GatewayLogicV1")),(0,r.kt)("p",null,"Gateway handles verifying mint and burn requests. A mintAuthority\napproves new assets to be minted by providing a digital signature. An owner\nof an asset can request for it to be burnt."),(0,r.kt)("p",null,"Inherits from:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GatewayStateV1")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IGateway")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CanReclaimTokens")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Claimable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Ownable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Context")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Initializable"))),(0,r.kt)("hr",null),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"modifiers"},"Modifiers"),(0,r.kt)("h3",{id:"onlyownerormintauthority"},(0,r.kt)("inlineCode",{parentName:"h3"},"onlyOwnerOrMintAuthority()")),(0,r.kt)("p",null,"Only allow the Darknode Payment contract."),(0,r.kt)("hr",null),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"initialize-contract-renerc20logicv1-_token-address-_feerecipient-address-_mintauthority-uint16-_mintfee-uint16-_burnfee-uint256-_minimumburnamount-public"},(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"initialize"))," ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"em"},"(contract RenERC20LogicV1 _token, address _feeRecipient, address _mintAuthority, uint16 _mintFee, uint16 _burnFee, uint256 _minimumBurnAmount)"))," (public)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Params")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"_token"),": The RenERC20 this Gateway is responsible for.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"_feeRecipient"),": The recipient of burning and minting fees.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"_mintAuthority"),": The address of the key that can sign mint\nrequests.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"_mintFee"),": The amount subtracted each mint request and\nforwarded to the feeRecipient. In BIPS.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"_burnFee"),": The amount subtracted each burn request and\nforwarded to the feeRecipient. In BIPS."))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"claimtokenownership--public"},(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"claimTokenOwnership"))," ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"em"},"()"))," (public)"),(0,r.kt)("p",null,"Claims ownership of the token passed in to the constructor.\n",(0,r.kt)("inlineCode",{parentName:"p"},"transferStoreOwnership")," must have previously been called.\nAnyone can call this function."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"transfertokenownership-contract-gatewaylogicv1-_nexttokenowner-public"},(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"transferTokenOwnership"))," ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"em"},"(contract GatewayLogicV1 _nextTokenOwner)"))," (public)"),(0,r.kt)("p",null,"Allow the owner to update the owner of the RenERC20 token."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"updatemintauthority-address-_nextmintauthority-public"},(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"updateMintAuthority"))," ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"em"},"(address _nextMintAuthority)"))," (public)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Params")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_nextMintAuthority"),": The address to start paying fees to.")),(0,r.kt)("p",null,"Allow the owner to update the fee recipient."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"updateminimumburnamount-uint256-_minimumburnamount-public"},(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"updateMinimumBurnAmount"))," ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"em"},"(uint256 _minimumBurnAmount)"))," (public)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Params")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_minimumBurnAmount"),": The new min burn amount.")),(0,r.kt)("p",null,"Allow the owner to update the minimum burn amount."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"updatefeerecipient-address-_nextfeerecipient-public"},(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"updateFeeRecipient"))," ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"em"},"(address _nextFeeRecipient)"))," (public)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Params")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_nextFeeRecipient"),": The address to start paying fees to.")),(0,r.kt)("p",null,"Allow the owner to update the fee recipient."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"updatemintfee-uint16-_nextmintfee-public"},(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"updateMintFee"))," ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"em"},"(uint16 _nextMintFee)"))," (public)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Params")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_nextMintFee"),": The new fee for minting and burning.")),(0,r.kt)("p",null,"Allow the owner to update the 'mint' fee."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"updateburnfee-uint16-_nextburnfee-public"},(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"updateBurnFee"))," ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"em"},"(uint16 _nextBurnFee)"))," (public)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Params")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_nextBurnFee"),": The new fee for minting and burning.")),(0,r.kt)("p",null,"Allow the owner to update the burn fee."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"mint-bytes32-_phash-uint256-_amountunderlying-bytes32-_nhash-bytes-_sig--uint256-public"},(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"mint"))," ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"em"},"(bytes32 _pHash, uint256 _amountUnderlying, bytes32 _nHash, bytes _sig) \u2192 uint256"))," (public)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Params")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"_pHash"),": (payload hash) The hash of the payload associated with the\nmint.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"_amountUnderlying"),": The amount of the token being minted, in its smallest\nvalue. (e.g. satoshis for BTC).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"_nHash"),": (nonce hash) The hash of the nonce, amount and pHash.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"_sig"),": The signature of the hash of the following values:\n(pHash, amount, msg.sender, nHash), signed by the mintAuthority."))),(0,r.kt)("p",null,"mint verifies a mint approval signature from RenVM and creates\ntokens after taking a fee for the ",(0,r.kt)("inlineCode",{parentName:"p"},"_feeRecipient"),"."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"burn-bytes-_to-uint256-_amount--uint256-public"},(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"burn"))," ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"em"},"(bytes _to, uint256 _amount) \u2192 uint256"))," (public)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Params")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"_to"),": The address to receive the un-bridged asset. The format of\nthis address should be of the destination chain.\nFor example, when burning to Bitcoin, _to should be a\nBitcoin address.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"_amount"),": The amount of the token being burnt, in its\nsmallest value. (e.g. satoshis for BTC)"))),(0,r.kt)("p",null,"burn destroys tokens after taking a fee for the ",(0,r.kt)("inlineCode",{parentName:"p"},"_feeRecipient"),",\nallowing the associated assets to be released on their native\nchain."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"verifysignature-bytes32-_signedmessagehash-bytes-_sig--bool-public"},(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"verifySignature"))," ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"em"},"(bytes32 _signedMessageHash, bytes _sig) \u2192 bool"))," (public)"),(0,r.kt)("p",null,"verifySignature checks the the provided signature matches the provided\nparameters."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"hashforsignature-bytes32-_phash-uint256-_amount-address-_to-bytes32-_nhash--bytes32-public"},(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"hashForSignature"))," ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"em"},"(bytes32 _pHash, uint256 _amount, address _to, bytes32 _nHash) \u2192 bytes32"))," (public)"),(0,r.kt)("p",null,"hashForSignature hashes the parameters so that they can be signed."),(0,r.kt)("hr",null),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("h3",{id:"logmintauthorityupdated-address-_newmintauthority"},(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"LogMintAuthorityUpdated"))," ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"em"},"(address _newMintAuthority)"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"logmint-address-_to-uint256-_amount-uint256-_n-bytes32-_signedmessagehash"},(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"LogMint"))," ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"em"},"(address _to, uint256 _amount, uint256 _n, bytes32 _signedMessageHash)"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"logburn-bytes-_to-uint256-_amount-uint256-_n-bytes-_indexedto"},(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"LogBurn"))," ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"em"},"(bytes _to, uint256 _amount, uint256 _n, bytes _indexedTo)"))),(0,r.kt)("hr",null))}c.isMDXComponent=!0},93454:function(e,t,n){n.d(t,{G:function(){return l},e:function(){return a}});var i,a,r=n(67294);!function(e){e.Tutorial="Tutorial",e.HowTo="How To",e.Reference="Reference",e.Explanation="Explanation"}(a||(a={}));var o=((i={})[a.Tutorial]="#b48ead",i[a.HowTo]="#69a8b9",i[a.Reference]="#bf616a",i[a.Explanation]="#d2b06c",i),l=function(e){var t=e.type,n=e.marginBottom;return r.createElement(r.Fragment,null,r.createElement("span",{style:{border:"2px solid "+o[t]||0,borderRadius:"5px",color:o[t]||"orange",padding:"0.1rem 0.4rem",marginBottom:void 0!==n?n:30,display:"inline-block"}},String(t)))}}}]);