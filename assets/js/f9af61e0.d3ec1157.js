"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5872],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),o=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=o(e.components);return r.createElement(d.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,d=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=o(n),c=i,m=u["".concat(d,".").concat(c)]||u[c]||k[c]||s;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,l=new Array(s);l[0]=u;var a={};for(var d in t)hasOwnProperty.call(t,d)&&(a[d]=t[d]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var o=2;o<s;o++)l[o]=n[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},75371:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return d},metadata:function(){return p},toc:function(){return k}});var r=n(87462),i=n(63366),s=(n(67294),n(3905)),l=n(93454),a=["components"],d={title:"LinkedList"},o=void 0,p={unversionedId:"darknode-sol/libraries/LinkedList",id:"darknode-sol/libraries/LinkedList",title:"LinkedList",description:"Contract: LinkedList",source:"@site/contracts/darknode-sol/libraries/LinkedList.mdx",sourceDirName:"darknode-sol/libraries",slug:"/darknode-sol/libraries/LinkedList",permalink:"/ren-client-docs/contracts/darknode-sol/libraries/LinkedList",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/contracts/darknode-sol/libraries/LinkedList.mdx",tags:[],version:"current",frontMatter:{title:"LinkedList"}},k=[{value:"Contract: <code>LinkedList</code>",id:"contract-linkedlist",children:[],level:2},{value:"Variables",id:"variables",children:[{value:"<strong><code>NULL</code></strong>: <em><code>address</code></em>",id:"null-address",children:[],level:3}],level:2},{value:"Functions",id:"functions",children:[{value:"<strong><code>insertBefore</code></strong> <em><code>(struct LinkedList.List self, address target, address newNode)</code></em> (internal)",id:"insertbefore-struct-linkedlistlist-self-address-target-address-newnode-internal",children:[],level:3},{value:"<strong><code>insertAfter</code></strong> <em><code>(struct LinkedList.List self, address target, address newNode)</code></em> (internal)",id:"insertafter-struct-linkedlistlist-self-address-target-address-newnode-internal",children:[],level:3},{value:"<strong><code>remove</code></strong> <em><code>(struct LinkedList.List self, address node)</code></em> (internal)",id:"remove-struct-linkedlistlist-self-address-node-internal",children:[],level:3},{value:"<strong><code>prepend</code></strong> <em><code>(struct LinkedList.List self, address node)</code></em> (internal)",id:"prepend-struct-linkedlistlist-self-address-node-internal",children:[],level:3},{value:"<strong><code>append</code></strong> <em><code>(struct LinkedList.List self, address node)</code></em> (internal)",id:"append-struct-linkedlistlist-self-address-node-internal",children:[],level:3},{value:"<strong><code>swap</code></strong> <em><code>(struct LinkedList.List self, address left, address right)</code></em> (internal)",id:"swap-struct-linkedlistlist-self-address-left-address-right-internal",children:[],level:3},{value:"<strong><code>isInList</code></strong> <em><code>(struct LinkedList.List self, address node) \u2192 bool</code></em> (internal)",id:"isinlist-struct-linkedlistlist-self-address-node--bool-internal",children:[],level:3},{value:"<strong><code>begin</code></strong> <em><code>(struct LinkedList.List self) \u2192 address</code></em> (internal)",id:"begin-struct-linkedlistlist-self--address-internal",children:[],level:3},{value:"<strong><code>end</code></strong> <em><code>(struct LinkedList.List self) \u2192 address</code></em> (internal)",id:"end-struct-linkedlistlist-self--address-internal",children:[],level:3},{value:"<strong><code>next</code></strong> <em><code>(struct LinkedList.List self, address node) \u2192 address</code></em> (internal)",id:"next-struct-linkedlistlist-self-address-node--address-internal",children:[],level:3},{value:"<strong><code>previous</code></strong> <em><code>(struct LinkedList.List self, address node) \u2192 address</code></em> (internal)",id:"previous-struct-linkedlistlist-self-address-node--address-internal",children:[],level:3},{value:"<strong><code>elements</code></strong> <em><code>(struct LinkedList.List self, address _start, uint256 _count) \u2192 address[]</code></em> (internal)",id:"elements-struct-linkedlistlist-self-address-_start-uint256-_count--address-internal",children:[],level:3}],level:2}],u={toc:k};function c(e){var t=e.components,n=(0,i.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(l.G,{type:l.e.Reference,mdxType:"DocTag"}),(0,s.kt)("h2",{id:"contract-linkedlist"},"Contract: ",(0,s.kt)("inlineCode",{parentName:"h2"},"LinkedList")),(0,s.kt)("p",null,"LinkedList is a library for a circular double linked list."),(0,s.kt)("hr",null),(0,s.kt)("br",null),(0,s.kt)("h2",{id:"variables"},"Variables"),(0,s.kt)("h3",{id:"null-address"},(0,s.kt)("strong",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"strong"},"NULL")),": ",(0,s.kt)("em",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"em"},"address"))),(0,s.kt)("hr",null),(0,s.kt)("br",null),(0,s.kt)("h2",{id:"functions"},"Functions"),(0,s.kt)("h3",{id:"insertbefore-struct-linkedlistlist-self-address-target-address-newnode-internal"},(0,s.kt)("strong",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"strong"},"insertBefore"))," ",(0,s.kt)("em",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"em"},"(struct LinkedList.List self, address target, address newNode)"))," (internal)"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Params")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"self"),": The list being used.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"target"),": The existing node in the list.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"newNode"),": The next node to insert before the target."))),(0,s.kt)("p",null,"Insert a new node before an existing node."),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"insertafter-struct-linkedlistlist-self-address-target-address-newnode-internal"},(0,s.kt)("strong",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"strong"},"insertAfter"))," ",(0,s.kt)("em",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"em"},"(struct LinkedList.List self, address target, address newNode)"))," (internal)"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Params")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"self"),": The list being used.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"target"),": The existing node in the list.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"newNode"),": The next node to insert after the target."))),(0,s.kt)("p",null,"Insert a new node after an existing node."),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"remove-struct-linkedlistlist-self-address-node-internal"},(0,s.kt)("strong",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"strong"},"remove"))," ",(0,s.kt)("em",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"em"},"(struct LinkedList.List self, address node)"))," (internal)"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Params")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"self"),": The list being using.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"node"),": The node in the list to be removed."))),(0,s.kt)("p",null,"Remove a node from the list, and fix the previous and next\npointers that are pointing to the removed node. Removing anode that is not\nin the list will do nothing."),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"prepend-struct-linkedlistlist-self-address-node-internal"},(0,s.kt)("strong",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"strong"},"prepend"))," ",(0,s.kt)("em",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"em"},"(struct LinkedList.List self, address node)"))," (internal)"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Params")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"self"),": The list being used.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"node"),": The node to insert at the beginning of the list."))),(0,s.kt)("p",null,"Insert a node at the beginning of the list."),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"append-struct-linkedlistlist-self-address-node-internal"},(0,s.kt)("strong",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"strong"},"append"))," ",(0,s.kt)("em",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"em"},"(struct LinkedList.List self, address node)"))," (internal)"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Params")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"self"),": The list being used.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"node"),": The node to insert at the end of the list."))),(0,s.kt)("p",null,"Insert a node at the end of the list."),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"swap-struct-linkedlistlist-self-address-left-address-right-internal"},(0,s.kt)("strong",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"strong"},"swap"))," ",(0,s.kt)("em",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"em"},"(struct LinkedList.List self, address left, address right)"))," (internal)"),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"isinlist-struct-linkedlistlist-self-address-node--bool-internal"},(0,s.kt)("strong",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"strong"},"isInList"))," ",(0,s.kt)("em",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"em"},"(struct LinkedList.List self, address node) \u2192 bool"))," (internal)"),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"begin-struct-linkedlistlist-self--address-internal"},(0,s.kt)("strong",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"strong"},"begin"))," ",(0,s.kt)("em",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"em"},"(struct LinkedList.List self) \u2192 address"))," (internal)"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Params")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"self"),": The list being used.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Returns")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"A"),": address identifying the node at the beginning of the double\nlinked list.")),(0,s.kt)("p",null,"Get the node at the beginning of a double linked list."),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"end-struct-linkedlistlist-self--address-internal"},(0,s.kt)("strong",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"strong"},"end"))," ",(0,s.kt)("em",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"em"},"(struct LinkedList.List self) \u2192 address"))," (internal)"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Params")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"self"),": The list being used.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Returns")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"A"),": address identifying the node at the end of the double linked\nlist.")),(0,s.kt)("p",null,"Get the node at the end of a double linked list."),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"next-struct-linkedlistlist-self-address-node--address-internal"},(0,s.kt)("strong",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"strong"},"next"))," ",(0,s.kt)("em",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"em"},"(struct LinkedList.List self, address node) \u2192 address"))," (internal)"),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"previous-struct-linkedlistlist-self-address-node--address-internal"},(0,s.kt)("strong",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"strong"},"previous"))," ",(0,s.kt)("em",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"em"},"(struct LinkedList.List self, address node) \u2192 address"))," (internal)"),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"elements-struct-linkedlistlist-self-address-_start-uint256-_count--address-internal"},(0,s.kt)("strong",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"strong"},"elements"))," ",(0,s.kt)("em",{parentName:"h3"},(0,s.kt)("inlineCode",{parentName:"em"},"(struct LinkedList.List self, address _start, uint256 _count) \u2192 address[]"))," (internal)"),(0,s.kt)("hr",null))}c.isMDXComponent=!0},93454:function(e,t,n){n.d(t,{G:function(){return a},e:function(){return i}});var r,i,s=n(67294);!function(e){e.Tutorial="Tutorial",e.HowTo="How To",e.Reference="Reference",e.Explanation="Explanation"}(i||(i={}));var l=((r={})[i.Tutorial]="#b48ead",r[i.HowTo]="#69a8b9",r[i.Reference]="#bf616a",r[i.Explanation]="#d2b06c",r),a=function(e){var t=e.type,n=e.marginBottom;return s.createElement(s.Fragment,null,s.createElement("span",{style:{border:"2px solid "+l[t]||0,borderRadius:"5px",color:l[t]||"orange",padding:"0.1rem 0.4rem",marginBottom:void 0!==n?n:30,display:"inline-block"}},String(t)))}}}]);