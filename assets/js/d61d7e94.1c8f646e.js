"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[875],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},98518:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=n(93454),l=["components"],s={title:"3. Chain Transactions"},c=void 0,u={unversionedId:"v3/tutorial/chain-transactions",id:"v3/tutorial/chain-transactions",title:"3. Chain Transactions",description:"As described in the Introducton, the RenJS hierarchy looks like:",source:"@site/ren-js/v3/tutorial/3-chain-transactions.mdx",sourceDirName:"v3/tutorial",slug:"/v3/tutorial/chain-transactions",permalink:"/ren-client-docs/ren-js/v3/tutorial/chain-transactions",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/ren-js/v3/tutorial/3-chain-transactions.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"3. Chain Transactions"},sidebar:"docs",previous:{title:"2. React Setup",permalink:"/ren-client-docs/ren-js/v3/tutorial/react-setup"},next:{title:"4. Gateway Transactions",permalink:"/ren-client-docs/ren-js/v3/tutorial/gateway-transactions"}},p=[{value:"Progress",id:"progress",children:[],level:3},{value:"Chain Status",id:"chain-status",children:[{value:"1. <code>&quot;ready&quot;</code>",id:"1-ready",children:[],level:4},{value:"2. <code>&quot;confirming&quot;</code>",id:"2-confirming",children:[],level:4},{value:"3. <code>&quot;done&quot;</code>",id:"3-done",children:[],level:4},{value:"4. <code>&quot;reverted&quot;</code>",id:"4-reverted",children:[],level:4}],level:3}],d={toc:p};function h(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(o.G,{type:o.e.Tutorial,mdxType:"DocTag"}),(0,i.kt)("p",null,"As described in the ",(0,i.kt)("a",{parentName:"p",href:"../introduction"},"Introducton"),", the RenJS hierarchy looks like:"),(0,i.kt)("img",{src:"/ren-client-docs/img/tutorial-hierarchy.png",width:"500"}),(0,i.kt)("p",null,"Starting at the bottom, we'll write a button component ",(0,i.kt)("inlineCode",{parentName:"p"},"ChainTx")," for handling chain transactions."),(0,i.kt)("p",null,"Chain transactions in RenJS implement wither the ",(0,i.kt)("inlineCode",{parentName:"p"},"TxWaiter")," or the ",(0,i.kt)("inlineCode",{parentName:"p"},"TxSubmitter")," interfacee"),(0,i.kt)("p",null,"The interface for the ChainTx component will look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'reference title="src/ChainTx.tsx"',reference:!0,title:'"src/ChainTx.tsx"'},"https://github.com/renproject/ren-js-v3-tutorial/blob/master/tutorial-ui/src/ChainTx_0.tsx\n")),(0,i.kt)("h3",{id:"progress"},"Progress"),(0,i.kt)("p",null,"Chain Transactions have an ",(0,i.kt)("inlineCode",{parentName:"p"},"eventListener")," member which emits ",(0,i.kt)("inlineCode",{parentName:"p"},'"progress"')," events whenever the state of the transaction changes - this includes confirmations, transaction hashes, error messages, et. cetera."),(0,i.kt)("p",null,"In order to listen to these events, we store the latest event in a React state hook, and use an effect hook to set up the event listener."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'reference title=""',reference:!0,title:'""'},"https://github.com/renproject/ren-js-v3-tutorial/blob/master/tutorial-ui/src/ChainTx.tsx#L28-L47\n")),(0,i.kt)("h3",{id:"chain-status"},"Chain Status"),(0,i.kt)("p",null,"We now check the status of the transaction, and handle each status type accordingly, inside the return statement - ",(0,i.kt)("inlineCode",{parentName:"p"},"return (<>...</>);"),"."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Async Button")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"To help keep this tutorial from getting too long, we've made a simple component ",(0,i.kt)("inlineCode",{parentName:"p"},"AsyncButton")," in the package ",(0,i.kt)("inlineCode",{parentName:"p"},"async-button")," which deals with calling an asynchronous function after a button click."),(0,i.kt)("p",{parentName:"div"},"AsyncButton extends the standard HTML button with the following props:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'reference title=""',reference:!0,title:'""'},"https://github.com/noah-ren/async-button/blob/main/src/index.tsx#L8-L15\n")))),(0,i.kt)("h4",{id:"1-ready"},"1. ",(0,i.kt)("inlineCode",{parentName:"h4"},'"ready"')),(0,i.kt)("p",null,"If the chain transaction hasn't been submitted yet, its status will be ",(0,i.kt)("inlineCode",{parentName:"p"},'"ready"'),", and the component should show a button to the user for submitting the transaction."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'reference title=""',reference:!0,title:'""'},"https://github.com/renproject/ren-js-v3-tutorial/blob/master/tutorial-ui/src/ChainTx.tsx#L51-L62\n")),(0,i.kt)("h4",{id:"2-confirming"},"2. ",(0,i.kt)("inlineCode",{parentName:"h4"},'"confirming"')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'reference title=""',reference:!0,title:'""'},"https://github.com/renproject/ren-js-v3-tutorial/blob/master/tutorial-ui/src/ChainTx.tsx#L64-L77\n")),(0,i.kt)("h4",{id:"3-done"},"3. ",(0,i.kt)("inlineCode",{parentName:"h4"},'"done"')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'reference title=""',reference:!0,title:'""'},"https://github.com/renproject/ren-js-v3-tutorial/blob/master/tutorial-ui/src/ChainTx.tsx#L79-L84\n")),(0,i.kt)("h4",{id:"4-reverted"},"4. ",(0,i.kt)("inlineCode",{parentName:"h4"},'"reverted"')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'reference title=""',reference:!0,title:'""'},"https://github.com/renproject/ren-js-v3-tutorial/blob/master/tutorial-ui/src/ChainTx.tsx#L86-L89\n")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"After putting this all together, you'll now have a component that can handle chain transactions for any chain."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Click to see full code for ChainTx.tsx"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'reference link title="ChainTx.tsx"',reference:!0,link:!0,title:'"ChainTx.tsx"'},"https://github.com/renproject/ren-js-v3-tutorial/blob/master/tutorial-ui/src/ChainTx.tsx\n"))))}h.isMDXComponent=!0},93454:function(e,t,n){n.d(t,{G:function(){return l},e:function(){return a}});var r,a,i=n(67294);!function(e){e.Tutorial="Tutorial",e.HowTo="How To",e.Reference="Reference",e.Explanation="Explanation"}(a||(a={}));var o=((r={})[a.Tutorial]="#b48ead",r[a.HowTo]="#69a8b9",r[a.Reference]="#bf616a",r[a.Explanation]="#d2b06c",r),l=function(e){var t=e.type,n=e.marginBottom;return i.createElement(i.Fragment,null,i.createElement("span",{style:{border:"2px solid "+o[t]||0,borderRadius:"5px",color:o[t]||"orange",padding:"0.1rem 0.4rem",marginBottom:void 0!==n?n:30,display:"inline-block"}},String(t)))}}}]);