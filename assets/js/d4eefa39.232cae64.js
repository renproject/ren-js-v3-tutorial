"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9922],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},61902:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=n(93454),l=["components"],s={title:"1. Smart Contract"},c=void 0,p={unversionedId:"v3/tutorial/smart-contract",id:"v3/tutorial/smart-contract",title:"1. Smart Contract",description:"In the code examples so far, RenJS has been used to mint tokens directly to a user's account. In this tutorial, we'll instead mint to a smart contract, allowing more complex interactions to be made in a single step.",source:"@site/ren-js/v3/tutorial/1-smart-contract.mdx",sourceDirName:"v3/tutorial",slug:"/v3/tutorial/smart-contract",permalink:"/ren-client-docs/ren-js/v3/tutorial/smart-contract",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/ren-js/v3/tutorial/1-smart-contract.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"1. Smart Contract"},sidebar:"docs",previous:{title:"Overview",permalink:"/ren-client-docs/ren-js/v3/tutorial"},next:{title:"2. React Setup",permalink:"/ren-client-docs/ren-js/v3/tutorial/react-setup"}},d=[{value:"Deposit function",id:"deposit-function",children:[],level:3},{value:"Withdraw function",id:"withdraw-function",children:[],level:3},{value:"Deploying to testnet",id:"deploying-to-testnet",children:[],level:3}],u={toc:d};function m(e){var t=e.components,s=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(i.G,{type:i.e.Tutorial,mdxType:"DocTag"}),(0,o.kt)("p",null,"In the code examples so far, RenJS has been used to mint tokens directly to a user's account. In this tutorial, we'll instead mint to a smart contract, allowing more complex interactions to be made in a single step."),(0,o.kt)("p",null,"The contract will be very simple, allowing the user to mint tokens to the contract, and then withdraw them again. The contract itself will hold the minted ERC20."),(0,o.kt)("p",null,"To get started, create a new Hardhat repository:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir contracts\ncd contracts\nyarn init --yes\nyarn add --dev hardhat\nyarn hardhat\n")),(0,o.kt)("p",null,"Select ",(0,o.kt)("inlineCode",{parentName:"p"},"Create an advanced sample project that uses TypeScript"),", and then go through the various prompts. It will install some dependencies, which may take a few minutes."),(0,o.kt)("p",null,"Next, add Ren's contracts as a dependency:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add @renproject/gateway-sol@next\n")),(0,o.kt)("p",null,"Remove ",(0,o.kt)("inlineCode",{parentName:"p"},"./contracts/Greeter.sol")," and instead create ",(0,o.kt)("inlineCode",{parentName:"p"},"./contracts/TutorialBridge.sol"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sol",metastring:'reference title="contracts/TutorialBridge.sol"',reference:!0,title:'"contracts/TutorialBridge.sol"'},"https://github.com/renproject/ren-js-v3-tutorial/blob/master/tutorial-sol/contracts/TutorialBridge_1.sol\n")),(0,o.kt)("p",null,"The contract will have two functions - a ",(0,o.kt)("inlineCode",{parentName:"p"},"deposit")," function for minting renBTC, and a ",(0,o.kt)("inlineCode",{parentName:"p"},"withdraw")," function for releasing renBTC back to Bitcoin. It will do this by calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"mint")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"burn")," functions on the BTC gateway contract."),(0,o.kt)("h3",{id:"deposit-function"},"Deposit function"),(0,o.kt)("p",null,"The first function, ",(0,o.kt)("inlineCode",{parentName:"p"},"deposit"),", we'll need to accept some additional parameters that are generated by RenVM, which will allow us to mint the renBTC. These parameters are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount")," represents the amount of BTC we are transferring into Ethereum,"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nHash")," (also known as the nonce hash) is used to uniquely identify a lock into Ethereum, and"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sig")," is a signature from RenVM to approve the mint.")),(0,o.kt)("p",null,"In addition to these required parameters, the ",(0,o.kt)("inlineCode",{parentName:"p"},"deposit")," function will also allow the user to attach a message to their deposit. In a real project, you would replace this with any number of parameters for doing more complicated contract interactions."),(0,o.kt)("p",null,"This is what the signature of the ",(0,o.kt)("inlineCode",{parentName:"p"},"deposit")," function will look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sol",metastring:'title="" reference',title:'""',reference:!0},"https://github.com/renproject/ren-js-v3-tutorial/blob/master/tutorial-sol/contracts/TutorialBridge_2.sol#L15-L23\n")),(0,o.kt)("p",null,"There is another parameter we need to forward to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Gateway")," for minting: the ",(0,o.kt)("inlineCode",{parentName:"p"},"pHash")," (also known as the payload hash). It is the hash of any extra parameters we are using (in our case this is the attached ",(0,o.kt)("inlineCode",{parentName:"p"},"message"),"). Inside the function body, add:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="" reference',title:'""',reference:!0},"https://github.com/renproject/ren-js-v3-tutorial/blob/master/tutorial-sol/contracts/TutorialBridge.sol#L24\n")),(0,o.kt)("p",null,"We can now get the address of the gateway and call ",(0,o.kt)("inlineCode",{parentName:"p"},"mint"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="" reference',title:'""',reference:!0},"https://github.com/renproject/ren-js-v3-tutorial/blob/master/tutorial-sol/contracts/TutorialBridge.sol#L25-L30\n")),(0,o.kt)("p",null,"Finally, we can log the message provided by the user:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="" reference',title:'""',reference:!0},"https://github.com/renproject/ren-js-v3-tutorial/blob/master/tutorial-sol/contracts/TutorialBridge.sol#L31\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"deposit")," function should now look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="" reference',title:'""',reference:!0},"https://github.com/renproject/ren-js-v3-tutorial/blob/master/tutorial-sol/contracts/TutorialBridge.sol#L15-L32\n")),(0,o.kt)("p",null,"The deposit function mints the"),(0,o.kt)("h3",{id:"withdraw-function"},"Withdraw function"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"withdaw")," function is similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"deposit")," function - we call ",(0,o.kt)("inlineCode",{parentName:"p"},"burn")," on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Gateway")," contract, instead of calling ",(0,o.kt)("inlineCode",{parentName:"p"},"mint"),"."),(0,o.kt)("p",null,"The user will provide the ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," of the withdrawal (as before), a ",(0,o.kt)("inlineCode",{parentName:"p"},"to")," Bitcoin address to receive the funds to, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"amount")," of BTC they want to withdraw."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="" reference',title:'""',reference:!0},"https://github.com/renproject/ren-js-v3-tutorial/blob/master/tutorial-sol/contracts/TutorialBridge.sol#L34-L43\n")),(0,o.kt)("hr",null),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click to see full code for TutorialBridge.sol"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'reference link title="TutorialBridge.sol"',reference:!0,link:!0,title:'"TutorialBridge.sol"'},"https://github.com/renproject/ren-js-v3-tutorial/blob/master/tutorial-sol/contracts/TutorialBridge.sol\n"))),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"deploying-to-testnet"},"Deploying to testnet"),(0,o.kt)("p",null,"You'll need ",(0,o.kt)("a",{parentName:"p",href:"https://metamask.io"},"MetaMask")," (or another Web3 wallet) installed and the Kovan network selected. Additionally, you'll need Kovan ETH (KETH). Request some here: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kovan-testnet/faucet"},"https://github.com/kovan-testnet/faucet")),(0,o.kt)("p",null,"To deploy the contract with MetaMask, we'll load it into ",(0,o.kt)("a",{parentName:"p",href:"https://remix.ethereum.org"},"remix.ethereum.org"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add --dev @remix-project/remixd\nyarn remixd -s . --remix-ide https://remix.ethereum.org\n")),(0,o.kt)("p",null,"Now go to ",(0,o.kt)("a",{parentName:"p",href:"https://remix.ethereum.org"},"remix.ethereum.org"),", and connect to localhost:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Remix - connect to localhost",src:n(86218).Z})),(0,o.kt)("p",null,'Select "contracts/TutorialBridge.sol" and then go to the "Solidity compiler" tab:'),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Remix - compile",src:n(69418).Z})),(0,o.kt)("p",null,'Switch to the "Deploy & Run Transactions" tab and then:'),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},'Select "Injected Web3" as the environment,'),(0,o.kt)("li",{parentName:"ol"},'Select "TutorialBridge" under the contract tab,'),(0,o.kt)("li",{parentName:"ol"},"Enter ",(0,o.kt)("inlineCode",{parentName:"li"},"0x5076a1F237531fa4dC8ad99bb68024aB6e1Ff701")," into the ",(0,o.kt)("inlineCode",{parentName:"li"},"address.gatewayRegistry_")," textinput, and"),(0,o.kt)("li",{parentName:"ol"},"Click deploy and confirm in MetaMask.")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("inlineCode",{parentName:"p"},"0x5076a1F237531fa4dC8ad99bb68024aB6e1Ff701")," is the current address of the GatewayRegistry contract on Kovan."),(0,o.kt)("p",{parentName:"div"},"You can find the address for other networks on the ",(0,o.kt)("a",{parentName:"p",href:"/ren-client-docs/contracts/deployments"},"Contract Deployments")," page."))),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Remix - deploy",src:n(97658).Z})),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can also use the TutorialBridge contract that we have deployed here: ",(0,o.kt)("a",{parentName:"p",href:"https://kovan.etherscan.io/address/0xd9145CCE52D386f254917e481eB44e9943F39138"},"0xd9145CCE52D386f254917e481eB44e9943F39138"),"."))))}m.isMDXComponent=!0},93454:function(e,t,n){n.d(t,{G:function(){return l},e:function(){return r}});var a,r,o=n(67294);!function(e){e.Tutorial="Tutorial",e.HowTo="How To",e.Reference="Reference",e.Explanation="Explanation"}(r||(r={}));var i=((a={})[r.Tutorial]="#b48ead",a[r.HowTo]="#69a8b9",a[r.Reference]="#bf616a",a[r.Explanation]="#d2b06c",a),l=function(e){var t=e.type,n=e.marginBottom;return o.createElement(o.Fragment,null,o.createElement("span",{style:{border:"2px solid "+i[t]||0,borderRadius:"5px",color:i[t]||"orange",padding:"0.1rem 0.4rem",marginBottom:void 0!==n?n:30,display:"inline-block"}},String(t)))}},86218:function(e,t,n){t.Z=n.p+"assets/images/remix-0-6600f86594c6fc7e9b12eec0c8c19330.png"},69418:function(e,t,n){t.Z=n.p+"assets/images/remix-1-97be063c5336d6c12519d3cc74cfa3cc.png"},97658:function(e,t,n){t.Z=n.p+"assets/images/remix-2-e1f12890b428246e99a43df160578d1c.png"}}]);