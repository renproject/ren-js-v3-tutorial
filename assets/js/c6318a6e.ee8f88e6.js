"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[650],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return h}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,d=u["".concat(s,".").concat(h)]||u[h]||p[h]||o;return n?r.createElement(d,i(i({ref:t},m),{},{components:n})):r.createElement(d,i({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},55138:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return p},default:function(){return _},frontMatter:function(){return m},metadata:function(){return u},toc:function(){return h}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=n(69324),l=n(93454),s=n(1773),c=["components"],m={title:"Ethereum"},p=void 0,u={unversionedId:"v3/reference/chains/ethereum",id:"v3/reference/chains/ethereum",title:"Ethereum",description:"Ethereum (TypeDoc)",source:"@site/ren-js/v3/reference/chains/ethereum.mdx",sourceDirName:"v3/reference/chains",slug:"/v3/reference/chains/ethereum",permalink:"/ren-client-docs/ren-js/v3/reference/chains/ethereum",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/ren-js/v3/reference/chains/ethereum.mdx",tags:[],version:"current",frontMatter:{title:"Ethereum"},sidebar:"docs",previous:{title:"Bitcoin",permalink:"/ren-client-docs/ren-js/v3/reference/chains/bitcoin"},next:{title:"Solana",permalink:"/ren-client-docs/ren-js/v3/reference/chains/solana"}},h=[{value:'Ethereum <TypeDoc name="Ethereum">(TypeDoc)</TypeDoc>',id:"ethereum-typedoc",children:[{value:"Payloads",id:"payloads",children:[],level:4}],level:3},{value:"EVMParam",id:"evmparam",children:[],level:3},{value:"Things to note",id:"things-to-note",children:[],level:3},{value:"Other chains",id:"other-chains",children:[],level:3}],d={toc:h};function _(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(l.G,{type:l.e.Reference,mdxType:"DocTag"}),(0,o.kt)("h3",{id:"ethereum-typedoc"},"Ethereum ",(0,o.kt)(i.L,{name:"Ethereum",mdxType:"TypeDoc"},"(TypeDoc)")),(0,o.kt)("p",null,"Initializing the Ethereum class requires:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},'a network - either a Ren network ("mainnet", "testnet" or "devnet"), or a ',(0,o.kt)("inlineCode",{parentName:"li"},"EVMmNetworkConfig"),"."),(0,o.kt)("li",{parentName:"ol"},"a provider - either an ethers provider, a Web3 provider or a string."),(0,o.kt)("li",{parentName:"ol"},"an optional signer - an ethers signer. If no signer is provided, the provider's signer will be used if available, or it can be provided later with ",(0,o.kt)("inlineCode",{parentName:"li"},".withSigner"),".")),(0,o.kt)("p",null,"Examples of initializing:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"MetaMask or other web3 browser"),(0,o.kt)("p",null,"After calling ",(0,o.kt)("inlineCode",{parentName:"p"},"eth_requestAccounts"),", you can then pass ",(0,o.kt)("inlineCode",{parentName:"p"},"window.ethereum")," directly to the Ethereum class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'await window.ethereum.request({ method: "eth_requestAccounts" });\n\nnew Ethereum({\n    network: "testnet",\n    provider: window.ethereum,\n});\n')),(0,o.kt)("p",null,"If you are using TypeScript, you can add this anywhere in your code to avoid getting an type error when accessing ",(0,o.kt)("inlineCode",{parentName:"p"},"window.ethereum"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"declare global {\n    interface Window {\n        ethereum: any;\n    }\n}\n")),(0,o.kt)("p",null,"Because the Ethereum constructor is synchronous, it won't immediately check that the provider is connected to the right network. In a front-end dApp, you should check the network by doing:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const { chainId } = await provider.getNetwork();\nif (chainId !== parseInt(ethereum.network.network.chainId)) {\n    throw new Error(\n        `Wrong network - please change to ${ethereum.network.network.chainName}`\n    );\n}\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Public endpoint with MetaMask signer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'new Ethereum({\n    network: "mainnet",\n    provider: "https://cloudflare-eth.com",\n});\n\nawait window.ethereum.request({ method: "eth_requestAccounts" });\nconst web3Provider = new ethers.providers.Web3Provider(\n    (window as any).ethereum\n);\nchain.withSigner(web3Provider.getSigner());\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Public endpoint with private key signer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Wallet } from "ethers";\n\nnew Ethereum({\n    network: "mainnet",\n    provider: "https://cloudflare-eth.com",\n    signer: Wallet.fromMnemonic(\n        "apple bank cargo ...",\n    );\n});\n'))),(0,o.kt)("h4",{id:"payloads"},"Payloads"),(0,o.kt)("p",null,"The available input payloads are:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Account"),(0,o.kt)(i.L,{name:"Ethereum.Account",mdxType:"TypeDoc"},"ethereum.Account")," allows you to specify the user's connected address as the origin of assets to be burnt or locked.",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'renJS.gateway({\n    asset: "BTC",\n    from: ethereum.Account({ amount: "0.1", convertUnit: true }),\n    ...\n})\n')),(0,o.kt)("p",null,"Required parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount")," - the asset amount to lock or burn")),(0,o.kt)("p",null,"Optional parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"convertUnit")," - convert the ",(0,o.kt)("inlineCode",{parentName:"li"},"amount")," to the chain's smallest unit."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"account")," - specify the account that the user should have connected when they submit.")),(0,o.kt)("p",null,"You can specify a specific account by providing an ",(0,o.kt)("inlineCode",{parentName:"p"},"account")," field in the options - this account should be connected when the user is prompted to submit the transaction.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Transaction"),(0,o.kt)(i.L,{name:"Ethereum.Transaction",mdxType:"TypeDoc"},"ethereum.Transaction")," allows you to specify a specific Ethereum transaction, instead of watching for deposits to the gateway address. Note that the recipient address of the transaction should still match the gateway address generated from the to-chain's parameters.",(0,o.kt)("p",null,"The transaction should be of type ",(0,o.kt)("code",null,"Partial<",(0,o.kt)(i.L,{name:"ChainTransaction",mdxType:"TypeDoc"}),">"),", with at least one of the ",(0,o.kt)("inlineCode",{parentName:"p"},"txid")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"txidFormatted")," is defined."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'renJS.gateway({\n    asset: "BTC",\n    from: ethereum.Transaction({\n      // The transaction\'s hash in the usual Ethereum hex encoding.\n      txidFormatted: "0xa1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d",\n      // The transaction\'s hash in URL-base64 encoding.\n      txid: "oQddtV1BbTyhmfVbYITiEVuTReFsXPMC_IDp1fv11I0",\n    }),\n    ...\n})\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Contract"),(0,o.kt)(i.L,{name:"Ethereum.Contract",mdxType:"TypeDoc"},"ethereum.Contract")," allows you to specify a call to a contract as the input transaction. The contract call should make a call to `burn` or `lock` on a Ren Gateway contract.",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'renJS.gateway({\n    asset: "BTC",\n    from: ethereum.Contract({\n      to: "0x1234",\n      method: "testBurnFunction",\n      withRenParams: false,\n      params: {\n        {\n            name: "message",\n            type: "string",\n            value: "Hello world.",\n        },\n      },\n    }),\n    ...\n})\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"withRenParams")," should be false for inputs - see the output Contract payload for details.")),(0,o.kt)("p",null,"The available output payloads are:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Account"),(0,o.kt)(i.L,{name:"Ethereum.Account",mdxType:"TypeDoc"},"ethereum.Account")," allows you to specify the user's account as the recipient of the minted or released funds.",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'renJS.gateway({\n    asset: "BTC",\n    ...\n    to: ethereum.Account(),\n})\n')),(0,o.kt)("p",null,"Optional parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"account")," - specify the account that the user should have connected when they submit."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"anyoneCanSubmit")," - by default, only the specified account can submit the output transaction. Set ",(0,o.kt)("inlineCode",{parentName:"li"},"anyoneCanSubmit")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," to allow anyone to submit the transaction for the user."))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Address"),(0,o.kt)(i.L,{name:"Ethereum.Address",mdxType:"TypeDoc"},"ethereum.Address")," allows you to specify an Ethereum address for receiving the minted/released funds.",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'renJS.gateway({\n    asset: "BTC",\n    ...\n    to: ethereum.Address("0x1234..."),\n})\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Contract"),(0,o.kt)(i.L,{name:"Ethereum.Contract",mdxType:"TypeDoc"},"ethereum.Contract")," allows you to specify a call to a contract as the output transaction. The contract call should make a call to `mint` or `release` on a Ren Gateway contract.",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'renJS.gateway({\n    asset: "BTC",\n    from: ethereum.Contract({\n      to: "0x1234...",\n      method: "testMintFunction",\n      withRenParams: true,\n      params: {\n        {\n            name: "message",\n            type: "string",\n            value: "Hello world.",\n        },\n      },\n    }),\n    ...\n})\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"withRenParams")," should be set to true if the contract function expected the Ren params ",(0,o.kt)("inlineCode",{parentName:"p"},"amount"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"nHash")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"signature")," as its last three parameters."),(0,o.kt)("p",null,"It adds the following three parameters to the contract call:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Ren Params"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'{\n    name: "amount",\n    type: "uint256",\n    value: EVMParam.EVM_AMOUNT,\n    notInPayload: true,\n    renParam: true,\n},\n{\n    name: "nHash",\n    type: "bytes32",\n    value: EVMParam.EVM_NHASH,\n    notInPayload: true,\n    renParam: true,\n},\n{\n    name: "signature",\n    type: "bytes",\n    value: EVMParam.EVM_SIGNATURE,\n    notInPayload: true,\n    renParam: true,\n},\n')),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"#evmparam"},"EVMParam")," below."))),(0,o.kt)("h3",{id:"evmparam"},"EVMParam"),(0,o.kt)("p",null,"When specifying a ",(0,o.kt)("inlineCode",{parentName:"p"},"Contract")," payload, you may provide a ",(0,o.kt)("inlineCode",{parentName:"p"},"EVMParam")," instead of a value for parameters. These will get replaced by the EVMParam's associated logic once available."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"EVMParam"),(0,o.kt)(s.P,{title:"EMVParam",mdxType:"Enumerate"},(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_INPUT_TYPE",mdxType:"TypeDoc"},"EVM_INPUT_TYPE"),' - whether the input is a "lock" or a "burn"'),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_OUTPUT_TYPE",mdxType:"TypeDoc"},"EVM_OUTPUT_TYPE"),' - whether the output is a "mint" or a "release"'),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_TRANSACTION_TYPE",mdxType:"TypeDoc"},"EVM_TRANSACTION_TYPE"),' - whether the transaction is a "setup", "mint", "burn", "lock" or "release'),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_TOKEN_ADDRESS",mdxType:"TypeDoc"},"EVM_TOKEN_ADDRESS")," - the address of the token being transferred - either the ren-asset or the lock-asset"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_TOKEN_DECIMALS",mdxType:"TypeDoc"},"EVM_TOKEN_DECIMALS")," - the decimals of the token"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_GATEWAY_IS_DEPOSIT_ASSET",mdxType:"TypeDoc"},"EVM_GATEWAY_IS_DEPOSIT_ASSET")," - whether the funds need to be transferred to a gateway address using TransferWithLog"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_GATEWAY_DEPOSIT_ADDRESS",mdxType:"TypeDoc"},"EVM_GATEWAY_DEPOSIT_ADDRESS")," - the gateway address for native assets (e.g. ETH)"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_TRANSFER_WITH_LOG_CONTRACT",mdxType:"TypeDoc"},"EVM_TRANSFER_WITH_LOG_CONTRACT")," - the address of the TransferWithLog contract"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_ACCOUNT",mdxType:"TypeDoc"},"EVM_ACCOUNT")," - the connected account"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_ACCOUNT_IS_CONTRACT",mdxType:"TypeDoc"},"EVM_ACCOUNT_IS_CONTRACT")," - whether the account has code deployed to it"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_GATEWAY",mdxType:"TypeDoc"},"EVM_GATEWAY")," - the address of the relevant gateway"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_ASSET",mdxType:"TypeDoc"},"EVM_ASSET")," - the asset being transacted"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_AMOUNT",mdxType:"TypeDoc"},"EVM_AMOUNT")," - the amount signed by RenVM (mints and releases)"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_NHASH",mdxType:"TypeDoc"},"EVM_NHASH")," - the RenVM transaction's nHash"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_PHASH",mdxType:"TypeDoc"},"EVM_PHASH")," - the RenVM transaction's pHash"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_SIGNATURE",mdxType:"TypeDoc"},"EVM_SIGNATURE")," - the signature generated by RenVM (mints and releases)"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_SIGNATURE_R",mdxType:"TypeDoc"},"EVM_SIGNATURE_R")," - the `r` component of the signature"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_SIGNATURE_S",mdxType:"TypeDoc"},"EVM_SIGNATURE_S")," - the `s` component of the signature"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_SIGNATURE_V",mdxType:"TypeDoc"},"EVM_SIGNATURE_V")," - the `v` component of the signature"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_TO_CHAIN",mdxType:"TypeDoc"},"EVM_TO_CHAIN")," - the target chain"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_TO_ADDRESS",mdxType:"TypeDoc"},"EVM_TO_ADDRESS")," - the target recipient"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_TO_ADDRESS_BYTES",mdxType:"TypeDoc"},"EVM_TO_ADDRESS_BYTES")," - the target recipient, decoded into bytes"),(0,o.kt)("p",null,(0,o.kt)(i.L,{name:"EVMParam.EVM_TO_PAYLOAD",mdxType:"TypeDoc"},"EVM_TO_PAYLOAD")," - the target paylaod"))),(0,o.kt)("h3",{id:"things-to-note"},"Things to note"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Locking ERC20s requires an approval transaction before calling ",(0,o.kt)("inlineCode",{parentName:"li"},"gateway.in"),". See ",(0,o.kt)("a",{parentName:"li",href:"../setupTxs"},"Setup Transactions"),".")),(0,o.kt)("h3",{id:"other-chains"},"Other chains"),(0,o.kt)("p",null,"A list of other chains that implement this same interface are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)(i.L,{name:"BinanceSmartChain",mdxType:"TypeDoc"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)(i.L,{name:"Polygon",mdxType:"TypeDoc"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)(i.L,{name:"Fantom",mdxType:"TypeDoc"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)(i.L,{name:"Arbitrum",mdxType:"TypeDoc"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)(i.L,{name:"Avalanche",mdxType:"TypeDoc"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)(i.L,{name:"Goerli",mdxType:"TypeDoc"})," (testnet only)")))}_.isMDXComponent=!0},93454:function(e,t,n){n.d(t,{G:function(){return l},e:function(){return a}});var r,a,o=n(67294);!function(e){e.Tutorial="Tutorial",e.HowTo="How To",e.Reference="Reference",e.Explanation="Explanation"}(a||(a={}));var i=((r={})[a.Tutorial]="#b48ead",r[a.HowTo]="#69a8b9",r[a.Reference]="#bf616a",r[a.Explanation]="#d2b06c",r),l=function(e){var t=e.type,n=e.marginBottom;return o.createElement(o.Fragment,null,o.createElement("span",{style:{border:"2px solid "+i[t]||0,borderRadius:"5px",color:i[t]||"orange",padding:"0.1rem 0.4rem",marginBottom:void 0!==n?n:30,display:"inline-block"}},String(t)))}},1773:function(e,t,n){n.d(t,{P:function(){return a}});var r=n(67294),a=function(e){var t=e.title,n=e.children;return r.createElement("div",{className:"enumerate"},r.createElement("h3",null,t),n)}},69324:function(e,t,n){n.d(t,{L:function(){return o}});var r=n(67294),a={Asset:"enums/_renproject_chains.Asset.html",Chain:"enums/_renproject_chains.Chain.html",RPCMethod:"enums/_renproject_provider.RPCMethod.html",ChainTransactionStatus:"enums/_renproject_utils.ChainTransactionStatus.html",InputType:"enums/_renproject_utils.InputType.html",LogLevel:"enums/_renproject_utils.LogLevel.html",OutputType:"enums/_renproject_utils.OutputType.html",PackPrimitive:"enums/_renproject_utils.PackPrimitive.html",RenJSError:"enums/_renproject_utils.RenJSError.html",RenNetwork:"enums/_renproject_utils.RenNetwork.html",TxStatus:"enums/_renproject_utils.TxStatus.html",EVMParam:"enums/_renproject_chains_ethereum.EVMParam.html",Bitcoin:"classes/_renproject_chains_bitcoin.Bitcoin.html",BitcoinBaseChain:"classes/_renproject_chains_bitcoin.BitcoinBaseChain.html",BitcoinCash:"classes/_renproject_chains_bitcoin.BitcoinCash.html",DigiByte:"classes/_renproject_chains_bitcoin.DigiByte.html",Dogecoin:"classes/_renproject_chains_bitcoin.Dogecoin.html",Zcash:"classes/_renproject_chains_bitcoin.Zcash.html",Arbitrum:"classes/_renproject_chains_ethereum.Arbitrum.html",Avalanche:"classes/_renproject_chains_ethereum.Avalanche.html",BinanceSmartChain:"classes/_renproject_chains_ethereum.BinanceSmartChain.html",Ethereum:"classes/_renproject_chains_ethereum.Ethereum.html",Fantom:"classes/_renproject_chains_ethereum.Fantom.html",Goerli:"classes/_renproject_chains_ethereum.Goerli.html",Polygon:"classes/_renproject_chains_ethereum.Polygon.html",Filecoin:"classes/_renproject_chains_filecoin.Filecoin.html",Solana:"classes/_renproject_chains_solana.Solana.html",Terra:"classes/_renproject_chains_terra.Terra.html",MockChain:"classes/_renproject_mock_provider.MockChain.html",MockProvider:"classes/_renproject_mock_provider.MockProvider.html",RenVMProvider:"classes/_renproject_provider.RenVMProvider.html",Gateway:"classes/_renproject_ren.Gateway.html",GatewayTransaction:"classes/_renproject_ren.GatewayTransaction.html",RenJS:"classes/_renproject_ren.RenJS.html",RenVMTxSubmitter:"classes/_renproject_ren.RenVMTxSubmitter.html",DefaultTxWaiter:"classes/_renproject_utils.DefaultTxWaiter.html",ErrorWithCode:"classes/_renproject_utils.ErrorWithCode.html",EventEmitterTyped:"classes/_renproject_utils.EventEmitterTyped.html",TxWaiterProxy:"classes/_renproject_utils.TxWaiterProxy.html",BitcoinNetworkConfig:"interfaces/_renproject_chains_bitcoin.BitcoinNetworkConfig.html",BitcoinOutputPayload:"interfaces/_renproject_chains_bitcoin.BitcoinOutputPayload.html",EthereumClassConfig:"interfaces/_renproject_chains_ethereum.EthereumClassConfig.html",EvmNetworkConfig:"interfaces/_renproject_chains_ethereum.EvmNetworkConfig.html",FilecoinNetworkConfig:"interfaces/_renproject_chains_filecoin.FilecoinNetworkConfig.html",FilecoinOutputPayload:"interfaces/_renproject_chains_filecoin.FilecoinOutputPayload.html",SolanaPayloadInterface:"interfaces/_renproject_chains_solana.SolanaPayloadInterface.html",TerraOutputPayload:"interfaces/_renproject_chains_terra.TerraOutputPayload.html",BlockState:"interfaces/_renproject_provider.BlockState.html",MarshalledRenVMBlock:"interfaces/_renproject_provider.MarshalledRenVMBlock.html",ParamsQueryBlock:"interfaces/_renproject_provider.ParamsQueryBlock.html",ParamsQueryBlockState:"interfaces/_renproject_provider.ParamsQueryBlockState.html",ParamsQueryBlocks:"interfaces/_renproject_provider.ParamsQueryBlocks.html",ParamsQueryConfig:"interfaces/_renproject_provider.ParamsQueryConfig.html",ParamsQueryTx:"interfaces/_renproject_provider.ParamsQueryTx.html",ParamsQueryTxs:"interfaces/_renproject_provider.ParamsQueryTxs.html",ParamsSubmitTx:"interfaces/_renproject_provider.ParamsSubmitTx.html",RenVMBlock:"interfaces/_renproject_provider.RenVMBlock.html",RenVMProviderInterface:"interfaces/_renproject_provider.RenVMProviderInterface.html",RenVMTransaction:"interfaces/_renproject_provider.RenVMTransaction.html",RenVMTransactionWithStatus:"interfaces/_renproject_provider.RenVMTransactionWithStatus.html",ResponseQueryBlock:"interfaces/_renproject_provider.ResponseQueryBlock.html",ResponseQueryBlockState:"interfaces/_renproject_provider.ResponseQueryBlockState.html",ResponseQueryBlocks:"interfaces/_renproject_provider.ResponseQueryBlocks.html",ResponseQueryConfig:"interfaces/_renproject_provider.ResponseQueryConfig.html",ResponseQueryTx:"interfaces/_renproject_provider.ResponseQueryTx.html",ResponseQueryTxs:"interfaces/_renproject_provider.ResponseQueryTxs.html",ResponseSubmitGateway:"interfaces/_renproject_provider.ResponseSubmitGateway.html",ResponseSubmitTx:"interfaces/_renproject_provider.ResponseSubmitTx.html",SubmitGatewayInput:"interfaces/_renproject_provider.SubmitGatewayInput.html",TransactionInput:"interfaces/_renproject_provider.TransactionInput.html",TransactionOutput:"interfaces/_renproject_provider.TransactionOutput.html",GatewayFees:"interfaces/_renproject_ren.GatewayFees.html",ChainCommon:"interfaces/_renproject_utils.ChainCommon.html",ChainTransaction:"interfaces/_renproject_utils.ChainTransaction.html",ChainTransactionProgress:"interfaces/_renproject_utils.ChainTransactionProgress.html",ContractChain:"interfaces/_renproject_utils.ContractChain.html",DepositChain:"interfaces/_renproject_utils.DepositChain.html",InputChainTransaction:"interfaces/_renproject_utils.InputChainTransaction.html",Logger:"interfaces/_renproject_utils.Logger.html",PackListType:"interfaces/_renproject_utils.PackListType.html",PackStructType:"interfaces/_renproject_utils.PackStructType.html",RenVMShard:"interfaces/_renproject_utils.RenVMShard.html",TxSubmitter:"interfaces/_renproject_utils.TxSubmitter.html",TxWaiter:"interfaces/_renproject_utils.TxWaiter.html",TypedPackValue:"interfaces/_renproject_utils.TypedPackValue.html"},o=function(e){var t=e.name,n=e.children,o=t.split("."),i=o[0],l=o[1];return r.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://renproject.github.io/ren-js-v3-docs/"+a[i]+(l?"#"+l:"")},n||t,a[i]?null:r.createElement("span",{style:{color:"#bf616a"}}," (Link not found)"))}}}]);