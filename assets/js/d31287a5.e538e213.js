"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1783],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return k}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),o=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=o(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=o(n),k=r,c=u["".concat(s,".").concat(k)]||u[k]||d[k]||l;return n?a.createElement(c,i(i({ref:t},m),{},{components:n})):a.createElement(c,i({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var o=2;o<l;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},22861:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return p},metadata:function(){return o},toc:function(){return m}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),i=["components"],p={id:"lib_utils_build_main_assert",title:"Module: lib/utils/build/main/assert",sidebar_label:"lib/utils/build/main/assert",sidebar_position:0,custom_edit_url:null},s="Module: lib/utils/build/main/assert",o={unversionedId:"v2/api/modules/lib_utils_build_main_assert",id:"v2/api/modules/lib_utils_build_main_assert",title:"Module: lib/utils/build/main/assert",description:"Functions",source:"@site/ren-js/v2/api/modules/lib_utils_build_main_assert.md",sourceDirName:"v2/api/modules",slug:"/v2/api/modules/lib_utils_build_main_assert",permalink:"/ren-client-docs/ren-js/v2/api/modules/lib_utils_build_main_assert",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"lib_utils_build_main_assert",title:"Module: lib/utils/build/main/assert",sidebar_label:"lib/utils/build/main/assert",sidebar_position:0,custom_edit_url:null}},m=[{value:"Functions",id:"functions",children:[{value:"assert",id:"assert",children:[{value:"Parameters",id:"parameters",children:[],level:4}],level:3},{value:"assertObject",id:"assertobject",children:[{value:"Type parameters",id:"type-parameters",children:[],level:4},{value:"Parameters",id:"parameters-1",children:[],level:4}],level:3},{value:"assertType",id:"asserttype",children:[{value:"Type parameters",id:"type-parameters-1",children:[],level:4},{value:"Parameters",id:"parameters-2",children:[],level:4}],level:3}],level:2}],d={toc:m};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"module-libutilsbuildmainassert"},"Module: lib/utils/build/main/assert"),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("h3",{id:"assert"},"assert"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,l.kt)("strong",{parentName:"p"},"assert"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"assertion"),": ",(0,l.kt)("em",{parentName:"p"},"boolean"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"sentence?"),": ",(0,l.kt)("em",{parentName:"p"},"string"),"): assertion is true"),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"assertion")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"boolean"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"sentence?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"string"))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," assertion is true"),(0,l.kt)("p",null,"Defined in: ren-js/packages/lib/utils/build/main/assert.d.ts:1"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"assertobject"},"assertObject"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,l.kt)("strong",{parentName:"p"},"assertObject"),"<T",">","(",(0,l.kt)("inlineCode",{parentName:"p"},"fieldTypes"),": ",(0,l.kt)("em",{parentName:"p"},"ObjectDefinition"),"<T",">",", ",(0,l.kt)("inlineCode",{parentName:"p"},"objects"),": { ","[key: string]",": T;  }): ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"object"))))),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"fieldTypes")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"ObjectDefinition"),"<T",">")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"objects")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"object"))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Defined in: ren-js/packages/lib/utils/build/main/assert.d.ts:43"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"asserttype"},"assertType"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,l.kt)("strong",{parentName:"p"},"assertType"),"<T",">","(",(0,l.kt)("inlineCode",{parentName:"p"},"type"),": ",(0,l.kt)("em",{parentName:"p"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"objects"),": { ","[value: string]",": T;  }): objects is object"),(0,l.kt)("p",null,"The following is a set of rudimentary type validation functions."),(0,l.kt)("p",null,"The main function is ",(0,l.kt)("inlineCode",{parentName:"p"},"assertType"),", which accepts a type and a dictionary of\nvalues."),(0,l.kt)("p",null,"The type must be a string that matches the following pattern:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'TYPE:\n  | TYPE \'|\' TYPE\n  | Array<TYPE>\n  | TYPE[]\n  | PRIMITIVE_TYPE\n\nPRIMITIVE_TYPE:\n  | "string"\n  | "number"\n  | "bigint"\n  | "boolean"\n  | "symbol"\n  | "undefined"\n  | "object"\n  | "function"\n  | "null"\n  | "any"\n  | "Buffer"\n  | "BigNumber"\n')),(0,l.kt)("p",null,"Types are matched by a regex so '|' can't be used at multiple levels, e.g.\n",(0,l.kt)("inlineCode",{parentName:"p"},"string | Array<string | number>"),"."),(0,l.kt)("h4",{id:"type-parameters-1"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"unknown"))))),(0,l.kt)("h4",{id:"parameters-2"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"objects")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"object"))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," objects is object"),(0,l.kt)("p",null,"Defined in: ren-js/packages/lib/utils/build/main/assert.d.ts:35"))}u.isMDXComponent=!0}}]);