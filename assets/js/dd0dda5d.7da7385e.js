"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4486],{3905:function(e,t,a){a.d(t,{Zo:function(){return o},kt:function(){return k}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},o=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),c=m(a),k=r,N=c["".concat(s,".").concat(k)]||c[k]||d[k]||i;return a?n.createElement(N,l(l({ref:t},o),{},{components:a})):n.createElement(N,l({ref:t},o))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var m=2;m<i;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},56501:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return o}});var n=a(87462),r=a(63366),i=(a(67294),a(3905)),l=["components"],p={id:"lib_interfaces_build_main_chain.chaincommon",title:"Interface: ChainCommon<Transaction, Address, Network>",sidebar_label:"ChainCommon",custom_edit_url:null},s="Interface: ChainCommon<Transaction, Address, Network>",m={unversionedId:"v2/api/interfaces/lib_interfaces_build_main_chain.chaincommon",id:"v2/api/interfaces/lib_interfaces_build_main_chain.chaincommon",title:"Interface: ChainCommon<Transaction, Address, Network>",description:"lib/interfaces/build/main/chain.ChainCommon",source:"@site/ren-js/v2/api/interfaces/lib_interfaces_build_main_chain.chaincommon.md",sourceDirName:"v2/api/interfaces",slug:"/v2/api/interfaces/lib_interfaces_build_main_chain.chaincommon",permalink:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_chain.chaincommon",editUrl:null,tags:[],version:"current",frontMatter:{id:"lib_interfaces_build_main_chain.chaincommon",title:"Interface: ChainCommon<Transaction, Address, Network>",sidebar_label:"ChainCommon",custom_edit_url:null}},o=[{value:"Type parameters",id:"type-parameters",children:[],level:2},{value:"Hierarchy",id:"hierarchy",children:[],level:2},{value:"Properties",id:"properties",children:[{value:"assetDecimals",id:"assetdecimals",children:[{value:"Type declaration",id:"type-declaration",children:[],level:4},{value:"Parameters",id:"parameters",children:[],level:4}],level:3},{value:"assetIsNative",id:"assetisnative",children:[{value:"Type declaration",id:"type-declaration-1",children:[],level:4},{value:"Parameters",id:"parameters-1",children:[],level:4}],level:3},{value:"assetIsSupported",id:"assetissupported",children:[{value:"Type declaration",id:"type-declaration-2",children:[],level:4},{value:"Parameters",id:"parameters-2",children:[],level:4}],level:3},{value:"initialize",id:"initialize",children:[{value:"Type declaration",id:"type-declaration-3",children:[],level:4},{value:"Parameters",id:"parameters-3",children:[],level:4}],level:3},{value:"legacyName",id:"legacyname",children:[],level:3},{value:"name",id:"name",children:[],level:3},{value:"renNetwork",id:"rennetwork",children:[],level:3},{value:"transactionConfidence",id:"transactionconfidence",children:[{value:"Type declaration",id:"type-declaration-4",children:[],level:4},{value:"Parameters",id:"parameters-4",children:[],level:4}],level:3},{value:"transactionFromID",id:"transactionfromid",children:[{value:"Type declaration",id:"type-declaration-5",children:[],level:4},{value:"Parameters",id:"parameters-5",children:[],level:4}],level:3},{value:"transactionID",id:"transactionid",children:[{value:"Type declaration",id:"type-declaration-6",children:[],level:4},{value:"Parameters",id:"parameters-6",children:[],level:4}],level:3},{value:"transactionRPCFormat",id:"transactionrpcformat",children:[{value:"Type declaration",id:"type-declaration-7",children:[],level:4},{value:"Parameters",id:"parameters-7",children:[],level:4}],level:3},{value:"utils",id:"utils",children:[{value:"Type declaration",id:"type-declaration-8",children:[],level:4}],level:3},{value:"withProvider",id:"withprovider",children:[{value:"Type declaration",id:"type-declaration-9",children:[],level:4},{value:"Parameters",id:"parameters-8",children:[],level:4}],level:3}],level:2}],d={toc:o};function c(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"interface-chaincommontransaction-address-network"},"Interface: ChainCommon<Transaction, Address, Network",">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain"},"lib/interfaces/build/main/chain"),".ChainCommon"),(0,i.kt)("h1",{id:"adding-chains"},"Adding chains"),(0,i.kt)("p",null,"Once a chain has been added to the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/renproject/multichain"},"multichain repo")," and accepted by the\ndarknodes, a handler can be written for RenJS."),(0,i.kt)("p",null,"The expected interface can be found in ",(0,i.kt)("inlineCode",{parentName:"p"},"../interfaces/src/chain.ts"),". There are two types of chains - lock chains and\nmint chains, each requiring a different handler interface. Lock chain handlers are for chains where funds are locked\nup under RenVM's control - e.g. Bitcoin or Zcash. A mint chain handler is for the chain where the wrapped tokens are\ncreated - e.g. Ethereum."),(0,i.kt)("p",null,"If a chain is a fork of another supported chain, it's recommended that the handler extends the forked chain's\nhandler."),(0,i.kt)("p",null,"If a chain has multiple assets (e.g. ETH and ERC20s), it's recommended that a single handler is written that supports\nall the relevant assets."),(0,i.kt)("h2",{id:"type-parameters"},"Type parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Transaction")),(0,i.kt)("td",{parentName:"tr",align:"left"},"-"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"any"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Address")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"string")," ","|"," { ",(0,i.kt)("inlineCode",{parentName:"td"},"address"),": ",(0,i.kt)("em",{parentName:"td"},"string"),"  }"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"any"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Network")),(0,i.kt)("td",{parentName:"tr",align:"left"},"-"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"any"))))),(0,i.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_chain.chainstatic"},(0,i.kt)("em",{parentName:"a"},"ChainStatic")),"<Transaction, Address, Network",">"),(0,i.kt)("p",{parentName:"li"},"\u21b3 ",(0,i.kt)("strong",{parentName:"p"},"ChainCommon")),(0,i.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_chain.lockchain"},(0,i.kt)("em",{parentName:"a"},"LockChain"))),(0,i.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_chain.mintchain"},(0,i.kt)("em",{parentName:"a"},"MintChain"))))),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"assetdecimals"},"assetDecimals"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"assetDecimals"),": (",(0,i.kt)("inlineCode",{parentName:"p"},"asset"),": ",(0,i.kt)("em",{parentName:"p"},"string"),") => ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<number",">"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"assetDecimals")," should return the number of decimals of the asset."),(0,i.kt)("p",null,"If the asset is not supported, an error should be thrown."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'bitcoin.assetDecimals = asset => {\n    if (asset === "BTC") { return 8; }\n    throw new Error(`Unsupported asset ${asset}.`);\n}\n')),(0,i.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,i.kt)("p",null,"\u25b8 (",(0,i.kt)("inlineCode",{parentName:"p"},"asset"),": ",(0,i.kt)("em",{parentName:"p"},"string"),"): ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<number",">"),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"asset")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"string"))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns:")," ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<number",">"),(0,i.kt)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:93"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"assetisnative"},"assetIsNative"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"assetIsNative"),": (",(0,i.kt)("inlineCode",{parentName:"p"},"asset"),": ",(0,i.kt)("em",{parentName:"p"},"string"),") => ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<boolean",">"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"assetIsNative")," should return true if the asset is native to the Chain.\nMint-chains should return ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," for assets that have been bridged to\nit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'ethereum.assetIsNative = asset => asset === "ETH" ||;\n')),(0,i.kt)("h4",{id:"type-declaration-1"},"Type declaration"),(0,i.kt)("p",null,"\u25b8 (",(0,i.kt)("inlineCode",{parentName:"p"},"asset"),": ",(0,i.kt)("em",{parentName:"p"},"string"),"): ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<boolean",">"),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"asset")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"string"))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns:")," ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<boolean",">"),(0,i.kt)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:71"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"assetissupported"},"assetIsSupported"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"assetIsSupported"),": (",(0,i.kt)("inlineCode",{parentName:"p"},"asset"),": ",(0,i.kt)("em",{parentName:"p"},"string"),") => ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<boolean",">"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"assetIsSupported")," should return true if the the asset is native to the\nchain or if the asset can be minted onto the chain."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'ethereum.assetIsSupported = asset => asset === "ETH" || asset === "BTC" || ...;\n')),(0,i.kt)("h4",{id:"type-declaration-2"},"Type declaration"),(0,i.kt)("p",null,"\u25b8 (",(0,i.kt)("inlineCode",{parentName:"p"},"asset"),": ",(0,i.kt)("em",{parentName:"p"},"string"),"): ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<boolean",">"),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"asset")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"string"))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns:")," ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<boolean",">"),(0,i.kt)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:80"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"initialize"},"initialize"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"initialize"),": (",(0,i.kt)("inlineCode",{parentName:"p"},"network"),": ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},(0,i.kt)("em",{parentName:"a"},"RenNetworkDetails"))," ","|"," ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/enums/lib_interfaces_build_main_networks.rennetwork"},(0,i.kt)("em",{parentName:"a"},"RenNetwork"))," ","|"," ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_networks#rennetworkstring"},(0,i.kt)("em",{parentName:"a"},"RenNetworkString")),") => ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_chain.chaincommon"},(0,i.kt)("em",{parentName:"a"},"ChainCommon")),"<Transaction, Address, Network",">",">"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"initialize")," allows RenJS to pass in parameters after the user has\ninitialized the Chain. This allows the user to pass in network\nparameters such as the network only once."),(0,i.kt)("p",null,"If the Chain's constructor has an optional network parameter and the\nuser has explicitly initialized it, the Chain should ignore the\nnetwork passed in to ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize"),". This is to allow different network\ncombinations, such as working with testnet Bitcoin and a local Ethereum\nchain - whereas the default ",(0,i.kt)("inlineCode",{parentName:"p"},"testnet")," configuration would use testnet\nBitcoin and Ethereum's Kovan testnet."),(0,i.kt)("h4",{id:"type-declaration-3"},"Type declaration"),(0,i.kt)("p",null,"\u25b8 (",(0,i.kt)("inlineCode",{parentName:"p"},"network"),": ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},(0,i.kt)("em",{parentName:"a"},"RenNetworkDetails"))," ","|"," ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/enums/lib_interfaces_build_main_networks.rennetwork"},(0,i.kt)("em",{parentName:"a"},"RenNetwork"))," ","|"," ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_networks#rennetworkstring"},(0,i.kt)("em",{parentName:"a"},"RenNetworkString")),"): ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_chain.chaincommon"},(0,i.kt)("em",{parentName:"a"},"ChainCommon")),"<Transaction, Address, Network",">",">"),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"network")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},(0,i.kt)("em",{parentName:"a"},"RenNetworkDetails"))," ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/ren-client-docs/ren-js/v2/api/enums/lib_interfaces_build_main_networks.rennetwork"},(0,i.kt)("em",{parentName:"a"},"RenNetwork"))," ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_networks#rennetworkstring"},(0,i.kt)("em",{parentName:"a"},"RenNetworkString")))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns:")," ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_chain.chaincommon"},(0,i.kt)("em",{parentName:"a"},"ChainCommon")),"<Transaction, Address, Network",">",">"),(0,i.kt)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:60"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"legacyname"},"legacyName"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,i.kt)("strong",{parentName:"p"},"legacyName"),": ",(0,i.kt)("em",{parentName:"p"},"string")),(0,i.kt)("p",null,"The name of the Chain used the v0.2 RenVM nodes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'bitcoin.legacyName = "Btc";\n')),(0,i.kt)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:43"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"name"},"name"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"name"),": ",(0,i.kt)("em",{parentName:"p"},"string")),(0,i.kt)("p",null,"The name of the Chain."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'bitcoin.name = "Bitcoin";\n')),(0,i.kt)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:35"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"rennetwork"},"renNetwork"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,i.kt)("strong",{parentName:"p"},"renNetwork"),": ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},(0,i.kt)("em",{parentName:"a"},"RenNetworkDetails"))),(0,i.kt)("p",null,"Should be set by ",(0,i.kt)("inlineCode",{parentName:"p"},"constructor")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize"),"."),(0,i.kt)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:47"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"transactionconfidence"},"transactionConfidence"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"transactionConfidence"),": (",(0,i.kt)("inlineCode",{parentName:"p"},"transaction"),": Transaction) => ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<{ ",(0,i.kt)("inlineCode",{parentName:"p"},"current"),": ",(0,i.kt)("em",{parentName:"p"},"number")," ; ",(0,i.kt)("inlineCode",{parentName:"p"},"target"),": ",(0,i.kt)("em",{parentName:"p"},"number"),"  }",">"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"transactionConfidence")," should return a target and a current\nconfidence that the deposit is irreversible. For most chains, this will\nbe represented by the number of blocks that have passed."),(0,i.kt)("p",null,"For example, a Bitcoin transaction with 2 confirmations will return\n",(0,i.kt)("inlineCode",{parentName:"p"},"{ current: 2, target: 6 }")," on mainnet, where the target is currently 6\nconfirmations."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"dev"))," Must be compatible with the matching RenVM multichain LockChain."),(0,i.kt)("h4",{id:"type-declaration-4"},"Type declaration"),(0,i.kt)("p",null,"\u25b8 (",(0,i.kt)("inlineCode",{parentName:"p"},"transaction"),": Transaction): ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<{ ",(0,i.kt)("inlineCode",{parentName:"p"},"current"),": ",(0,i.kt)("em",{parentName:"p"},"number")," ; ",(0,i.kt)("inlineCode",{parentName:"p"},"target"),": ",(0,i.kt)("em",{parentName:"p"},"number"),"  }",">"),(0,i.kt)("h4",{id:"parameters-4"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"transaction")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Transaction")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns:")," ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<{ ",(0,i.kt)("inlineCode",{parentName:"p"},"current"),": ",(0,i.kt)("em",{parentName:"p"},"number")," ; ",(0,i.kt)("inlineCode",{parentName:"p"},"target"),": ",(0,i.kt)("em",{parentName:"p"},"number"),"  }",">"),(0,i.kt)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:110"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"transactionfromid"},"transactionFromID"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"transactionFromID"),": (",(0,i.kt)("inlineCode",{parentName:"p"},"txid"),": ",(0,i.kt)("em",{parentName:"p"},"string")," ","|"," ",(0,i.kt)("em",{parentName:"p"},"Buffer"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"txindex"),": ",(0,i.kt)("em",{parentName:"p"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"reversed?"),": ",(0,i.kt)("em",{parentName:"p"},"boolean"),") => ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<Transaction",">"),(0,i.kt)("h4",{id:"type-declaration-5"},"Type declaration"),(0,i.kt)("p",null,"\u25b8 (",(0,i.kt)("inlineCode",{parentName:"p"},"txid"),": ",(0,i.kt)("em",{parentName:"p"},"string")," ","|"," ",(0,i.kt)("em",{parentName:"p"},"Buffer"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"txindex"),": ",(0,i.kt)("em",{parentName:"p"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"reversed?"),": ",(0,i.kt)("em",{parentName:"p"},"boolean"),"): ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<Transaction",">"),(0,i.kt)("h4",{id:"parameters-5"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"txid")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("em",{parentName:"td"},"Buffer"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"txindex")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"string"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"reversed?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"boolean"))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns:")," ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<Transaction",">"),(0,i.kt)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:118"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"transactionid"},"transactionID"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"transactionID"),": (",(0,i.kt)("inlineCode",{parentName:"p"},"transaction"),": Transaction) => ",(0,i.kt)("em",{parentName:"p"},"string")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"transactionID")," should return a string that uniquely represents the\ntransaction."),(0,i.kt)("h4",{id:"type-declaration-6"},"Type declaration"),(0,i.kt)("p",null,"\u25b8 (",(0,i.kt)("inlineCode",{parentName:"p"},"transaction"),": Transaction): ",(0,i.kt)("em",{parentName:"p"},"string")),(0,i.kt)("h4",{id:"parameters-6"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"transaction")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Transaction")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns:")," ",(0,i.kt)("em",{parentName:"p"},"string")),(0,i.kt)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:98"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"transactionrpcformat"},"transactionRPCFormat"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"transactionRPCFormat"),": (",(0,i.kt)("inlineCode",{parentName:"p"},"transaction"),": Transaction, ",(0,i.kt)("inlineCode",{parentName:"p"},"v2?"),": ",(0,i.kt)("em",{parentName:"p"},"boolean"),") => { ",(0,i.kt)("inlineCode",{parentName:"p"},"txid"),": ",(0,i.kt)("em",{parentName:"p"},"Buffer")," ; ",(0,i.kt)("inlineCode",{parentName:"p"},"txindex"),": ",(0,i.kt)("em",{parentName:"p"},"string"),"  }"),(0,i.kt)("h4",{id:"type-declaration-7"},"Type declaration"),(0,i.kt)("p",null,"\u25b8 (",(0,i.kt)("inlineCode",{parentName:"p"},"transaction"),": Transaction, ",(0,i.kt)("inlineCode",{parentName:"p"},"v2?"),": ",(0,i.kt)("em",{parentName:"p"},"boolean"),"): ",(0,i.kt)("em",{parentName:"p"},"object")),(0,i.kt)("h4",{id:"parameters-7"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"transaction")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Transaction")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"v2?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"boolean"))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns:")," ",(0,i.kt)("em",{parentName:"p"},"object")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"txid")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"Buffer"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"txindex")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"string"))))),(0,i.kt)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:114"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"utils"},"utils"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"utils"),": ",(0,i.kt)("em",{parentName:"p"},"object")),(0,i.kt)("h4",{id:"type-declaration-8"},"Type declaration"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"addressExplorerLink?")),(0,i.kt)("td",{parentName:"tr",align:"left"},"(",(0,i.kt)("inlineCode",{parentName:"td"},"address"),": ",(0,i.kt)("em",{parentName:"td"},"string")," ","|"," Address, ",(0,i.kt)("inlineCode",{parentName:"td"},"network?"),": ",(0,i.kt)("a",{parentName:"td",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},(0,i.kt)("em",{parentName:"a"},"RenNetworkDetails"))," ","|"," Network ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/ren-client-docs/ren-js/v2/api/enums/lib_interfaces_build_main_networks.rennetwork"},(0,i.kt)("em",{parentName:"a"},"RenNetwork"))," ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_networks#rennetworkstring"},(0,i.kt)("em",{parentName:"a"},"RenNetworkString")),", ",(0,i.kt)("inlineCode",{parentName:"td"},"explorer?"),": ",(0,i.kt)("em",{parentName:"td"},"string"),") => ",(0,i.kt)("em",{parentName:"td"},"undefined")," ","|"," ",(0,i.kt)("em",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"addressExplorerLink")," should return a URL that can be shown to a user to access more information about an address.  ",(0,i.kt)("inlineCode",{parentName:"td"},"explorer")," can be provided to request a link to a different explorer. It's up to the chain implementation to choose how to interpret this.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"transactionExplorerLink?")),(0,i.kt)("td",{parentName:"tr",align:"left"},"(",(0,i.kt)("inlineCode",{parentName:"td"},"transaction"),": ",(0,i.kt)("em",{parentName:"td"},"string")," ","|"," Transaction, ",(0,i.kt)("inlineCode",{parentName:"td"},"network?"),": ",(0,i.kt)("a",{parentName:"td",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},(0,i.kt)("em",{parentName:"a"},"RenNetworkDetails"))," ","|"," Network ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/ren-client-docs/ren-js/v2/api/enums/lib_interfaces_build_main_networks.rennetwork"},(0,i.kt)("em",{parentName:"a"},"RenNetwork"))," ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_networks#rennetworkstring"},(0,i.kt)("em",{parentName:"a"},"RenNetworkString")),", ",(0,i.kt)("inlineCode",{parentName:"td"},"explorer?"),": ",(0,i.kt)("em",{parentName:"td"},"string"),") => ",(0,i.kt)("em",{parentName:"td"},"undefined")," ","|"," ",(0,i.kt)("em",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"transactionExplorerLink")," should return a URL that can be shown to a user to access more information about a transaction.  ",(0,i.kt)("inlineCode",{parentName:"td"},"explorer")," can be provided to request a link to a different explorer. It's up to the chain implementation to choose how to interpret this.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"addressIsValid")),(0,i.kt)("td",{parentName:"tr",align:"left"},"(",(0,i.kt)("inlineCode",{parentName:"td"},"address"),": ",(0,i.kt)("em",{parentName:"td"},"string")," ","|"," Address, ",(0,i.kt)("inlineCode",{parentName:"td"},"network?"),": ",(0,i.kt)("a",{parentName:"td",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},(0,i.kt)("em",{parentName:"a"},"RenNetworkDetails"))," ","|"," Network ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/ren-client-docs/ren-js/v2/api/enums/lib_interfaces_build_main_networks.rennetwork"},(0,i.kt)("em",{parentName:"a"},"RenNetwork"))," ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_networks#rennetworkstring"},(0,i.kt)("em",{parentName:"a"},"RenNetworkString")),") => ",(0,i.kt)("em",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"resolveChainNetwork")),(0,i.kt)("td",{parentName:"tr",align:"left"},"(",(0,i.kt)("inlineCode",{parentName:"td"},"network"),": ",(0,i.kt)("a",{parentName:"td",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},(0,i.kt)("em",{parentName:"a"},"RenNetworkDetails"))," ","|"," Network ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/ren-client-docs/ren-js/v2/api/enums/lib_interfaces_build_main_networks.rennetwork"},(0,i.kt)("em",{parentName:"a"},"RenNetwork"))," ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_networks#rennetworkstring"},(0,i.kt)("em",{parentName:"a"},"RenNetworkString")),") => Network"),(0,i.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,i.kt)("p",null,"Inherited from: ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_chain.chainstatic"},"ChainStatic"),".",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_chain.chainstatic#utils"},"utils")),(0,i.kt)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:228"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"withprovider"},"withProvider"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,i.kt)("strong",{parentName:"p"},"withProvider"),": (...",(0,i.kt)("inlineCode",{parentName:"p"},"args"),": ",(0,i.kt)("em",{parentName:"p"},"any"),"[]) => ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_chain.chaincommon"},(0,i.kt)("em",{parentName:"a"},"ChainCommon")),"<Transaction, Address, Network",">",">"),(0,i.kt)("h4",{id:"type-declaration-9"},"Type declaration"),(0,i.kt)("p",null,"\u25b8 (...",(0,i.kt)("inlineCode",{parentName:"p"},"args"),": ",(0,i.kt)("em",{parentName:"p"},"any"),"[]): ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_chain.chaincommon"},(0,i.kt)("em",{parentName:"a"},"ChainCommon")),"<Transaction, Address, Network",">",">"),(0,i.kt)("h4",{id:"parameters-8"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"...args")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"any"),"[]")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns:")," ",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/modules/lib_interfaces_build_main_chain#syncorpromise"},(0,i.kt)("em",{parentName:"a"},"SyncOrPromise")),"<",(0,i.kt)("a",{parentName:"p",href:"/ren-client-docs/ren-js/v2/api/interfaces/lib_interfaces_build_main_chain.chaincommon"},(0,i.kt)("em",{parentName:"a"},"ChainCommon")),"<Transaction, Address, Network",">",">"),(0,i.kt)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:61"))}c.isMDXComponent=!0}}]);